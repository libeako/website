* this section talks about equality propositions that are prooved in compile time, not about equality propositions that are tested at run time
* roles of equality propositions in programming in compile time :
	* type checking
		* the core of type checking is checking equality between types
	* proving equational properties about the program or the domain of the program by the human programmer
* the core task of type checking is to check if the type of the actual input of a function is what the function expects; the core task of that is checking equality between 2 types expressed by [possibly complex] terms ["expressions"]
* 2 types are considered equal iff all their structure and all their components [dependencies] are equal
* modern type systems are powerful, thus their types may contain all kinds of stuff in them
	* link to 'dependencies of types'
		# links-to internal enjlgzgdnjxyjcck
* hence modern compilers must have an equality testing mechanism general for all kinds of terms
* how can the compiler test equality between general terms? a straightforward method is checking identity between them; but in practice very often the same value is denoted by different terms; thus most compilers in practice evaluate the terms so much as they can and only after that do they perform the identity test, hoping that the evaluation leads to simpler terms, which hence may become identical
* but even this may be not enough
	* for example: the compilers usually are not able to prove the commutativity of integer addition
	* for these cases the programming language may provide a way for the programmer to attach a missing proof constructed by herself
* "intensional" equality
	* a statement of intensional equality exists at the meta level [inside the compiler]; hence it is a "judgement"
	* prooving of intensional equalities is done by the compiler on its own; but the compiler on its own can not prove all the true equations; because of this : its equality test returns not { true, false }, but rather { true, unknown }; an other way to see this is that it returns real bool value, but the relation this defines is not the usually regarded mathematical equality; but is it any kind of equality? yes; it is very easy to see that this test has the usually expected properties of equality [substitutivity, equivalence]; thus the name "intensional euqality" is still justified
	* this type of equality is also named "definitional"
* "extensional" equality
	* the compiler may not prove all the mathematically true equalities, hence some remain for the human programmer; this section discusses this kind of equality
	* a statement of extensional equality is stated and proved by the programmer, they exist in the source code [this corresponds to the "object level" in the logical sense]; the programmer can not only prove but also refute it, by forming its negation and proving that; this altogether means that such a statement is a proposition in the logic sense
	* this type of equality is also named "propositional"
	* proving can be done only in compile time, that is: "at the type level"
		* hence the programmer expresses equality proposition as type 
		* the whole thing is done in the spirit of
		* the programming-logic correspondence
			# links-to internal kdtdlfyrudrcnrrl
		* the truth value of the statement corresponds to the inhabitation of the type
	* here i start to build the type to express equality; i will name it by "Eq"; equality is interpreted only on values of the same type, hence its expressing type must depend on the type of the values whose equality is proposed : Eq := Type -> ...; the equality proposition is about 2 values of this type, hence the type must depend on these value
	* s : Eq := (t : Type) -> (a : t) -> (b : t) -> ...
		* link to 'dependent type'
			# links-to internal svwipwixjxnwcfer
		* link to 'dependent value'
			# links-to internal svwipwixjxnwcfer
	* for the rest we have different options
		* inspired by logic
			* this is just the translation of the definition of equality in logic to programming
				* see equality in mathematics
					# links-to internal dxhxiloqezsthksz
			* EqLo := (t : Type) -> (x : t) -> (y : t) -> (p : t -> Type) -> (p x -> p y)
			* "EqLo" is short of "equality from logic"
		* generalized algebraic data type
			* EqGa (t : Type) (a : t) (b : t) :=
				* refl : EqGa t a a
			* "EqGo" is short of "equality as gadt"
			* 'refl' is short for "reflexivity"; reflecting the fact that it constructs reflexive pairs
			* converting
				* from intensional
					* generally with generalized algebraic data types : a constructor of a gadt can be invoked iff the output type of it unifies with the type of the whole gadt
					* these types here are
						* EqGa t a b
							* the type of the whole gadt
							* here i omitted the types of the inputs
						* EqGa t a a
							* the type of the output of the constructor
						* note that the difference is only in the last input; hence they unify iff (a = b); unification is done by the type checking hence it is the compiler that has to know that (a = b)
					* summing up : the type has exactly one constructor whose requirement is that (a = b) intensionally
				* to intensional
					* this is possible by pattern matching
						* p : EqualGa t a b ... (case p of refl  {-- here the compiler learns --} -> ... ) ...
						* the compiler unifies the output type of the constructor with the type of the whole gadt, which in this case leads to the conclusion that (a = b), which intensional information can be used in the handler side of the pattern match
	* equivalence between the different representations of equality
		* equivalence between different types expressing the same proposition can be proved by showing any pair of functions between the 2 types
		* lo_ga : EqLo t a b -> EqGa t a b lo_ga lo = lo (EqGa t a)
		* refl ga_lo : EqGa t a b -> EqLo t a b ga_lo ga =
			* case ga of refl -> identity
		* in lo_ga : 
			* we want to construct an EqGa t a b; the only way to do that is to invoke a constructor of it, which it has only one; the output type of the constructor is EqGa t a a, but we need to create EqGa t a b; introducing (p : = EqGa t a) : refl is a (p a) but we want a (p b); but this is exactly the kind of tranlation that the logic inspired equality can perform [check its definition]
			* in the invokation of lo : i left its first few arguments [t a b] implicit
