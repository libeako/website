* why? i will use 2 analogies to explain:
* set instead of list
	* think about a program source, consisting of text lines
	* what do the lines represent ?
		* in IP : instructions
		* in FP : definitions of values
	* does the order of the lines matter in the behavior of the program ?
		* in IP : yes
		* in FP : no
	* hence a program
		* in IP is a list of lines
		* in FP is a set of lines
	* the main task of a coder is to make sure that the program [the source of the program] is correct; for this:
		* in functional programming the coder needs to understand the lines individually and make sure that they are correct individually
		* in imperative programming the coder also needs to understand and oversee the order of the lines and make sure that it is correct
		* thus : in functional programming the independent parts of the code that we need to oversee and work with - are an order of magnitude smaller and hence functional programming is an order of magnitude easier
* + 1 dimension 
	* imperative programming has 1 more dimension; hence it is more difficult to oversee an imperative program; the additional dimension is time;
	* in functional programming only values are, which are constant; but in an imperative programming objects also are, the values of which may change; in imperative programming we need to not only oversee the "variables" but also their change over time
	* + 1 dimension makes the coding task an order of magnitude more difficult
		* how much more difficulty the additional of a dimension may cause? for an example consider computer graphics; it is much more difficult to render a 3 dimensional scene than to render a 2 dimensional scene
