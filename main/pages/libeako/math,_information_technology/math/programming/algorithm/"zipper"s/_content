* a "zipper" is a variant of a linked data structure with a focus point, suitable for functional processing
* in my opinion : the name "zipper" is bad, because it is really not like zipping and "zip" (is also used and is really suitable) for something else : forming a collection of pairs of corresponding elements from 2 same-structured collections [: (c x, c y) -> c (x, y) ]
* the linked list is a simplest linked data structure, hence i will use it as example to introduce zippers
* suppose we want to perform some operations on lists : modifying an element, deleting an element, adding a new element; we want to implement the operations functionally, without real mutation; we can easily be efficient at the start of the list; but what about the other places? this is the task that zippers give a solution to; the zipper idea works with a central asumption : we have a focus point; that is a position in the data structure where the operations are performed; the focus point is shifted around node-by-node; for example : in a text editor the focus point would be the position of the cursor; the focus point devides the list to 2 partitions ["early", "late"]; these 2 parts we store as separate lists; the vicinity of the focus point is the start of the late part and the end of the early part; hence operations in the late part are efficient; but what about those in the early part? here is the key idea : we store the early part in reverse order; an alternative view of the reversal is that we reverse the direction of links betwee the nodes of one of the parts; this alternative view can help you when designing zipper versions of more complex data structures
* the idea can be applied to any linked data structure
