\ id kaxxmpbkqesnqecy
* "monoidal" functor in the function category is an interface of type functions; special version of functor
* motivation
	* the map function of functor makes us able to lift a function to the level of the functor
		* map : (x -> y) -> (c x -> c y)
	* what if the function i want to lift has more inputs?
		* for example
			* (x1 -> x2 -> r) -> (c x1 -> c x2 -> c r)
			* for example to add 2 vectors by elements
	* can i implement a lift function for 2-input functions with using only the map function of functor? it is a good excercise for you to try
	* answer: no, it is impossible
	* but it feels very clear that it is desired in the same way as for 1-input functions; hence we want a generalization of functor that supports lifting functions with other arites; this interface will be named "monoidal"
	* to make my notation unambiguous: i will write into the name of the map functions the arity of their first input
	* map_n : (x1 -> ... -> xn -> r) -> (c x1 -> ... -> c xn -> c r)
	* map_1 is the functorial map function
	* we want map_n functions for all n > 1 too
	* thus the set of map_n functions is infinite; but it is technically impossible to put infinitely many requirements into an interface; luckily it is not necessary, because map_2 alone is enough to implement all of { map_n | n > 1 }
		* the key is this function
			* (<*>) : c (x -> y) -> (c x -> c y)
			* (<*>) = map_2 (\ f x -> f x)
			* map_2 is enough to lift the function application function
		* (<*>) makes us able to implement map_n for every n inductively; by "inductively" i mean: implement the next map function from the previous one, that is implement map_k from map_n where k = n+1
			* the input of map_k is a function of type (x1 -> ... -> xn -> xk -> r)
			* this can be thought of as a function with one less inputs: (x1 -> ... -> xn -> (xk -> r))
				* this is just using the right associativity of (->)
			* to this we can apply map_n, which exists by inductive hypothesis
			* applying it we get a function with type
				* (c x1 -> ... -> c xn -> c (xk -> r))
			* but we want (c x1 -> ... -> c xn -> c xk -> c r)
			* this conversion is implementable via the conversion f (xk -> r) -> (c xk -> c r), which (<*>) does
			* finally: the implementation of map_k building on map_n and (<*>)
				* map_k : (x1 -> ... -> xn -> xk -> r) -> (c x1 -> ... -> c xn -> c xk -> c r)
				* map_k func cx1 cx2 ... cxn cxk = (map_n func cx1 cx2 ... cxn) <*> cxk
		* thus by extending the functor interface with the requirement for map_2: we achieve the ability to lift any function with arity >= 1
	* but what about arity = 0? it again can not be implemented by the other map_ functions, hence we add it to interface monoidal as a separate requirement
	* this motivation leads to this signature
		* interface Monoidal c <= Functor c wehere
			* map_0 : r -> c r
			* map_2 : (x1 -> x2 -> r) -> (c x1 -> c x2 -> c r)
	* but the actual signature will be a simpler, but equivalent one; i will not prove this equivalance, but and because it is a very easy and good excercise
* the monoidal style expression
	* interface Monoidal c <= Functor c wehere
		* (**) : c x -> c y -> c (x*y)
			* -- associative up to isomorphism
		* unit : c ()
			* -- is neutral in ** up to isomorphism
	* the methods behave like the operations of monoid [hence the name "monoidal"] with the slight loosening that instead of equality, only isomorphism ["≅"] is required
		* commutativity of **
			* x ** (x ** y) z ≅ x ** (y ** z)
		* neutrality of unit
			* unit ** x ≅ x
			* x ** unit ≅ x
* the laws
	* the naturality law
		* in general category theory: monoidal also contains a naturality law
			* map (x *** y) (x' ** y') = map x x' ** map y y'
			* where *** creates a function from 2 input functions that applies the 2 input functions by-component to a pair of inputs
		* as generally: in coding naturality is given by parametricity
			* link to 'naturality'
				\ links-to internal nisopwyprssrsvgg
			* link to 'parametricity'
				\ links-to internal iuvbupavbjmhfrxj
			* link to 'free theorems'
				\ links-to internal ejqpvlbcoexibqku
		* my derivation of the free theorem
			\ links-to internal thfnzywxpqkcvtdh
* applicative
	* in practice often an equivalent alternative expression is used, and is named "applicative"
	* interface Applicative c where
		* pure : x -> c x
		* (<*>) : c (x -> y) -> (c x -> c y)
	* the laws for this expression are less intuitive, hence i omit them here
* traversable
	\ links-to internal uatqvzoqdjbcizxw
* more sources
	* Marcin Szamotulski: Monoidal and Applicative Functors
		\ links-to external https://coot.me/posts/monoidal-functors.html
* monad
	\ links-to internal mtcrpjujemznyvue
