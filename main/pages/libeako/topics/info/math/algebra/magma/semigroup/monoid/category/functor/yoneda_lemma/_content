\ id kopilawcleduvioy
* intuition
	* it is well known that all things are isomorphic with a thing that can turn any continuation to the result of the continuation
	* with formalism
		* x ≅ λ (r : Type) -> (x -> r) -> r
	* you can easily find the functions that map from one side to the other; that gives you an intuitive justification of the isomorphism; but proving that they are inverses of each other is difficult because it needs a free theorem
		* link to 'free theorems'
			\ links-to internal ejqpvlbcoexibqku
	* you can find the proof including the free theorem in the article (Philip Wadler: Theorems for free!)
* the general form of the Yoneda lemma
	* adds a functor "F"
	* F x ≅ λ (r : Type) -> (x -> r) -> F r
	* the previously shown concrete version can be recovered from this general version by F := the identity functor
	* the proof of this theorem in its full category-theoretic generality is easy and available in almost all category-theory introductory books
		* link to 'categrory theory: sources to learn from'
			\ links-to internal yupvqrvgexyesprr
* "the Yoneda functor"
	* is a popular name for the right side of the Yoneda isomorhism as expressed above
	* in Haskell it can be expressed like this
		* newtype Yoneda f c = forall r . (c -> r) -> f r
* the dual
	* 2 possibilities of dualizing the Yoneda lemma are interesting:
	* for contravariant functor
		* this is a very simple possibility of dualizing
		* F x ≅ λ (r : Type) -> (r -> x) -> F r
		* here F is contravariant
	* an other possibility
		* Coyoneda f x := exists c. f c * (c -> x)
		* the Conyoneda functor is the free functor
		* additional source
			* by J. Abrahamson
				\ links-to external https://stackoverflow.com/a/24006085/112298
			* From Hask Till Dawn: Coyoneda and fmap fusion
				\ links-to external http://alpmestan.com/posts/2017-08-17-coyoneda-fmap-fusion.html
* other sources
	* in Haskell
		* good first intuition for programmers
			* Reverse Engineering Machines with the Yoneda Lemma
				\ links-to external http://blog.sigfpe.com/2006/11/yoneda-lemma.html
		* awesome proof
			* https://scturtle.me/posts/2015-06-16-yoneda.html
