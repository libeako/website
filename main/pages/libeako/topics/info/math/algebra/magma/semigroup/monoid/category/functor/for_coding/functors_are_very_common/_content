\ id bzefktrxsjcdpwwk
* functions by their output type are functors; one can think about a function as a collection with exactly one element but whose evaluation is postponed because it has a dependency
* functor composition
	* vertically: if F and G are functors then F >>> G is functor too
	* horizontally: via product and sum type construction
* very many important data types are constructed by the above ones, hence form functors
	* every type function that we think of as a collection is a functor
		* List
		* Array
		* Maybe
		* Either l
			* type function Either has 2 parameters, one for each case ["left", "right"]
			* i consider (Either l) to be a partial application of the multi-input type function Either; its type is still a type function, which has 1 input
* because all this: functor is a good candidate for generic implementation via the data structure; the Haskell compiler provides built-in automatism that implements it for most types [without run-time overhead]
