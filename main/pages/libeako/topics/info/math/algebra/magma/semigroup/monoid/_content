\ id cabjryjnnstdjmvb
* definition
	* interface Monoid t <= Semigroup t
		* neutral : t -- behaves neutrally with the Semigroup's composition function
* see neutrality
	\ links-to internal syexzvqvirwlpspt
* see semigroup
	\ links-to internal eovnsnrjngyuihhx
* examples
	* i denote the examples with juxtaposition [separate the members of the monoid instance with only a space], the empty value is in the middle in the triple
	* 
		* numbers 0 +
		* numbers 1 *
		* lists (empty list) (list concatenation)
		* endo-functions (identity function) (function composition)
		* sets (the empty set) union
		* sets (the total set) intersection
			* iff a total set exists
		* propositions true and
		* propositions false or
		* list List.empty List.concatenate
			* list with these methods is algebraically equivalent to monoid [list is the "free" monoid]
* examples of semigroup but not monoid
	* numbers (min or max)
* creating new monoids from old ones
	* via product type construction
		* instance Monoid (t1 t2) <= (Monoid t1, Monoid t2) where
			* empty = (empty x1, empty x2)
		* of course this works with any kind of product type [any tuples, vectors]
* category is a more sophisticated [more expressive] version of monoid
	\ links-to internal edsabrzmtmhnwgml
