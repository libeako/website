\ id gmxnnexlvjvpclrd
* this section presents an example of using Functor: lens
* a lens represents a property [data member] [here 'p'] of a product type [here 't'] by the 2 accessors [a getter, a setter]
* Lens t p = (t -> p) * (p -> t -> t)
* get = first
* set = second
* map-lens : lens t p -> (p -> p) -> (t -> t)
* map-lens = Î» l f old -> flip (set l) old (f (get l  old))
* this function takes a function with type (p -> p)
* but what if the client of 'map-lens' can not provide such a function, but can provide only one with effect?
* this is why we should provide a version of 'map-lens' that accepts function with effect
* map-lens-e : Functor c => lens t p -> (p -> c p) -> (t -> c p)
* map-lens-e = Î» l f old -> map (flip (set l) old) (f (get l old))
