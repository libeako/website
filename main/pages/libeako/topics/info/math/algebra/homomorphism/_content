* "homomorphism" is a function between the base sets of 2 algebras of the same class, so that the structural properties of that class are kept
* example
	* a homomorphism between monoids
		* see monoid
			# links-to internal cabjryjnnstdjmvb
	* size : List e -> Integer
	* the size function is a homomorphism from (the monoid of lists with list concatenation) to (the monoid of integers with addition), because
		* it maps (the empty element of the list monoid [the empty list]) to (the empty element of the integer monoid [0])
		* it maps (the concatenation of 2 lists) to (the addition of the sizes of those lists)
* only the structure of the algebra-class is to be kept
	* note that the size homomorphism does not preserve all the structure of lists; for example the order of the elements of the lists is lost; this is okay; a homomorphism needs to preserve only the structure which is specified by the algebra variety, in this case : the properties that make the collection of lists a monoid; the structure of an individual list is the internal structure of that list, that is of a value of the algebra; a homomorphism needs to preserve only the structure between the values [the structure of the algebra-class] and not the structure inside the individual values of the algebra
* isomorphism
	* makes it possible to go back
	* it is an invertible function between values of algebras which preserves the algebraic structure in both directions [that is : both it and its inverse are homomorphisms]
	* the algebraic layers of 2 isomorphic worlds [algebras] contain the same information, mathematically they are "equivalent"; the difference between such algebras is only in the individual values of them, which is insignificant from the algebraic view-point
