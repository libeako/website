\ id hoqxwlarqggqsrwp
* typing is categorizing expressions; we say "type" instead of "category"; each expression have exactly 1 type [if the context of the expression is also taken into account]
* why typing?
	* typing prevents us from bugs, both in math and in programming
		* for example by restricting us from passing incorrect arguments to functions, but from other types of mistakes too	
	* types provide much run-time optimization possibility for software
	* typing can help in the security of software too
	* types can direct the worker [mathematician or programmer in the right direction for the next step] ["type-driven development"]
* type systems do their job by restricting the worker; hopefully by disallowing all invalid steps while allowing all valid steps; this is the goal but can they really do this? not perfectly; no type system could ever be perfect - this is proven mathematically; but modern practical type-systems are powerful enough to be suitable for almost all practical situations in math and in programming
* is having to declare types not too much burdon on the worker? sometimes it is; but usually the info specified by the types would have to be specified in comments or other natural language anyway; having those info in types is much better, because:
	* types are checked automatically; comments and other natural texts are not checked, hence they are not guaranteed to be present and be in synchron with the code
	* types being part of the formal language makes them more concise and easy to read than natural text
* the outer-most framework of a typing process is the deduction system; it is the set of rules that specify how to deduce statements, potentially out of earlierly deduced statements
* "type theory" means the theoretic science of typing
* "a type theory" means a concrete type system
* proposition as type
	\ links-to internal zdxruzhjrevtjynt
* recursion in types
	\ links-to internal phpdubounappbqkj
