# id phpdubounappbqkj
* this topic builds on 
	* the propositions as types correspondence
		# links-to internal zdxruzhjrevtjynt
* recursion is dangerous, it can lead to accidental (inconsistency in logic) and (non-termination in computing); this is true for recursion in types too, but fortunately some constraints on (recursion in types) save us from these dangers
* the problem
	* in logic
		* a proposition P is equivalent to the proposition 'P is true'; hence if we define P recursively as 'P := P is false' then 'P is true = P is false', which is contradiction, hence our logic must not allow such recursions
	* in type theory
		* the previously examined 'P := P is false' logical proposition would be represented in type theory as 
		* P := P -> Empty
			* where 'Empty' is an empty type
		* alternatively with datatype definition:
			* datatype P = make-P (P -> Empty)
			* with full constructor type syntax:
				* datatype P where
					* make-P : (P -> Empty) -> P
		* the existence of such a function should be suspicious from the start; it would be a method to construct a P from the proof that P is empty
		* generally the existence of non-sensical types are okay, one just would not be able to make ["implement"] instances of them; but constructor functions are special, as they do not have to be implemented by the user, as they are provided [implemented] by the language [the compiler]
		* operationally a compiler can implement this constructor function too, of course
		* but it would be a logical mistake
			* here is some code
				* unwrap : P -> (P -> Empty) := \ P f -> f
				* no : P -> Empty := \ p -> unwrap p p
				* f : Empty := no (make-P no)
			* this code proves that a value 'f' can be created of an empty type; which though is false, which implies that our logic is inconsistent, which would be bad
			* the code may seem to type-check and hence it may seem that operationally it will happen - a value of an empty type will be created in run-time; but it will not happen; what will happen is that the code of 'f' will run without termination
* the solution
	* is to not allow recursions that would lead to logical inconsistency or non-termination but still allow recursions for constructions of recursive data-structures
	* the general form of a constructor of a datatype is
		* c : forall (p : P) . ((A p -> T) -> T)
			* where
				* P is the type of parameters
				* A is the type of arity
					* the arity describes the structure of the collection of T-s to be used in the construction of a new T
		* any other form may be expressed with this form
		* Andrej Bauer wrote about this an awesome little post on cs.stackexchange
			# links-to external https://cs.stackexchange.com/questions/55646/strict-positivity
	* the condition is that the arity may not refer to the type getting defined
