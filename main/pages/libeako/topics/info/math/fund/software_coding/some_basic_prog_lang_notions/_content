\ id jaxbiyrfnbhaormb
* in this section i describe some basic notion of programming, including syntax, terminology; i use this throughout this site and they are common in functional programming languages; but note: this syntax is not necessarily the real precise syntax of any programming language, but is only similar to them, a mix of what is common in them; by "them" i mean mostly the programming languages haskell, idris, agda, f#, f*, elm, purescript
* type annotation
	* (x is a value of type t) is usually written as "x : t"
	* haskell, purescript use double ":"
	* idris, agda use single ":"
	* as type systems get more capable, the use of type annotation is getting more important, it deserves the simple syntax
	* mathematical type theory uses single ":"
* symbol definition
	* (s is a symbol of type t with value v) is written as follows
		* in mathematical text
			* s : t := v
		* many practical programming languages use simply "=" instead of ":="
	* some programming languages make it possible to separate the type annotation from the value assignment into separate lines
		* s : t
		* s = v
* product type
	\ links-to internal zlfhoqikoudywfzu
* function
	\ links-to internal acsyovgrmdzvytoz
* enum type
	\ links-to internal keopxbnbneqhcmwr
* sum type
	\ links-to internal iarpgpjgytyzcamq
* "algebraic data type"
	* "algebraic data type" construction is just a common name for product and sum type construction
* pattern matching
	\ links-to internal ybfruhnhbcxrqyol
* "generalized algebraic datatypes"
	\ links-to internal oornolrtruyzbntt
* type classes
	\ links-to internal biuqwfqzzkpjuqob
