\ id epfrgfuyehepgifc
* the logical quantifications are {forall, exists}
* forall
	* example
		* forall x ∊ Human : x is mortal
	* general form
		* forall x ∊ S1 : S2 x
	* the difficulty in representing quantified statements comes from that the statement depends on the qualified object [here: 'x'], hence the type representing the statement must depend on value
	* fortunately:
		* dependent types are about doing that
			\ links-to internal vzdcxxawjkqmcakz
	* thus:
	* (rep (forall x ∊ S1 : S2 x)) = (x : rep S1 -> (rep S2) x)
		* here (rep S2) "depends" on x, it is a dependent type and the whole type is a dependent product type
* exists
	* (rep (exists x ∊ S1 : S2 x)) = ((x : rep S1) (rep S2) x)
		* here (rep S2) "depends" on x, it is a dependent type and the whole type is a dependent sum type
	* forall and exists are dual of each other and their representations [dependent product type, dependent sum type] are dual of each other too
