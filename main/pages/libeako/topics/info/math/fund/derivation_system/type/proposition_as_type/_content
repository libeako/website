\ id kdtdlfyrudrcnrrl
* logic emerges from type theory; logical concepts can be represented by the most basic type theoretical concepts; logical propsitions can be represented by types, logical proofs can be represented by constructed objects; the importance of this simple and natural idea is fundamental and huge
	* it is not overstatement that this is a most fundamental development science in the 20th century
* this idea can be used both in mathematics and in programming and gives a simple, natural and powerful theoretical foundation for both of them
	* the similarities between math and programming is not a coincidence, the outer-most layer of programming is math, as both of them are just about construction of mathematial objects, programs are mathematical objects, even if their use case of the program is not specially mathematical
* it is one of the greatest piece of knowledge i have ever learned in programming
* the name of this idea is "propositions as types" or sometimes "Curry Howard correspondence"
* this idea connects the logical and the constructive worlds, by expressing logics with type-theory; what are these 2 worlds? the constructive world lets us construct mathematical objects, like lambda calculus; the logical world is the propositions and their proofs; of course the constructive world can and always could express anything generally, including logical concepts, but before 'propositions as types' the logical part existed above the constructive world, treated separately, had a separate dedicated language and separate rules [of validity]; with 'props as types' the logical world exists inside the constructive world [same level], does not need a separate language (other than the language of construction) and can be about the objects of the constructive world
* this idea is not tricky, it is not only a human invention; instead it has a deep and simple and natural theoretical foundation; here is the 
* derivation of the core idea
	\ links-to internal ekondytrrodzxtui
* the core idea
	* the proposition represented by a type is true if and only if the type is inhabitedthe proposition represented by a type is true if and only if the type is inhabited
* how can we prove a proposition? the question translates to types as follows: how can we prove that a type is inhabited? the answer is trivial: we show an instance of the type; by 'show' i mean we declare it to have that type and give a definition to it; the static type-checking is the verification of the proof
* examples of representing simple statements
	* equality
		\ links-to internal cteoxhjanjufrioe
* the proposition as type idea can be proved to be correct by a simple structural induction - induction on the structure of the statements; statements can be either primitive or composite
	* among [the types representing] the primitive statements no relation exists, hence no consistency problems may be
	* hence all is needed is to prove the consistency of the representation of composite statements, which can be done individually per type of logical construct
* notation for the work that follows
	* multiple names are used to refer to empty types: "()" [- the empty tuple type], "Empty", "False", "Absurd"
	* representation correspondence
		* rep : Proposition -> Type
			* outputs the type representing the input proposition
		* derep : Type -> Proposition
			* inverse of rep
* representing logical constructs
	\ links-to internal huktyxsxcfntvnbj
* representing logical axioms
	\ links-to internal tucpuipfoxmuftxd
* appreciation
	* it is remarkable that now we can use a single simple functional programming language to model the world [domain of the client], propose statements about the world, prove those statements, specify the task of a program, implement the program, verify that the program fulfills the specification
* additional sources
	\ links-to internal ekondytrrodzxtui
