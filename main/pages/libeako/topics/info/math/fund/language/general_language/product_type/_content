\ id zlfhoqikoudywfzu
* pair
	* the value-set of the pair of types x, y is the cartesian product of the value-sets of types x, y; with other words: it is a pair of values of type x and of type y
	* the size [as the number of values] of a product type is the product of the sizes of its member types; hence the name "product type"
	* syntax of type: "(x, y)" or "x * y"
	* syntax of literal:  "(vx, vy)", where (vx : x) and (vy : y)
* the components of the product are also often named "field", "member"
* tuple
	* "tuple" is a generalization of pair, in which the number of components is not fixed to be 2, but can be any non-negative integer; an "n-ary" tuple has exactly n components
	* the name of a component of a tuple say its ordinal; for example "_1", "_2", ... or "first", "second", ...
	* all tuples can be represented by multiple application of a pair
		* for example: a tuple consisting of 3 components a, b, c is equivalent to ((a b) c) 
* record
	* the nominal correspondent of tuple is "record"
		* a record type is just like a tuple but it has a distinguishing name and names for its components
		* in c#, java, c, c++ the record types are "struct", "class"
	* records are mathematically equivalent to the tuple of their fields
	* to read the value of a field f from record r
		* the most usual syntax is the simplest
			* f r
		* i may use the syntax
			* get f r
			* for tuple types i may use the ordinal as name of the field
* 0-tuple
	* the number of fields of a tuple can be zero; just as other tuples: syntax of such tuple is just a list of the members in round braces: "()", both for the types and for the literals; in the case of 0-tuples: nothing is in the braces because no member is of a zero-tuple; hence () : (); () is the only member of (), hence () is a singleton type, and due to its fundamental nature and being part of the language: it is usually the canonical singleton type
