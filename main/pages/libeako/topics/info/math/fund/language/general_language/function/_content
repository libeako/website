\ id acsyovgrmdzvytoz
* syntax of the function type from type x to type y is 
	* x -> y
* "lambda function"
	\ links-to internal kofbgukzdvgkwkxs
	* are just 'function literals
* a syntax sugar for function implementation is 
	* instead of 
		* f = fun x -> ... x ...
	* f x = ... x ...
* function application
	* function application is a very common kind of expression, hence many language designers think it deserves the most simple syntax: a space
	* f x
	* this is the invocation of function f with argument x
* the input being a type
	* in Java and C# this is known as "generic"
	* f : (t : Type) -> (... t ...)
		* where (...  t ...) is a type expression depending on t
	* in some languages [notably Haskell] we just write
		* f : (... t ...)
		* and the compiler automatically infers that that t, not known for it, is an implicit type input
* the "identity" function
	* id : (t : Type) -> (t -> t)
	* id x = x
	* the name is from the fact that the output is "identical" to the input
* implicit arguments
	* an argument in a function application is implicit iff it is not specified by the coder explicitly, but is let for the compiler to infer it
	* an input is implicit iff its corresponding argument is implicit
	* which inputs are implicit?
		* in Haskell the type inputs are implicit
		* in Idris, Agda the coder can specify any input to be implicit, by enclosing them in curly braces, but this still lets the coder to explicitly specify them in applications, in curly braces
	* example in Idris
		* in the type
			* f : { t : Type } -> t -> ...
		* in application
			* implicitly:
				* f 5
			* explicitly
				* f {t = Integer} 5
* multi-input functions
	* most functional programming languages adopt the simplicity of math: a function has exactly 1 input and exactly 1 output; still: this simplicity is enough to express multi-input functions too; here follows how
	* the natural solution is to pack the multiple inputs into one, their product:
		* (x1, x2) -> y
	* currying
		\ links-to internal rjvsfevdnztyxdlz
		* is an other solution
	* flipping the order of the inputs
		* flip : (a->b->o) -> (b->a->o)
		* flip f b a = f a b
* infix naming
	* chaining multiple applications of the same binary function can look ugly with the regular syntax
	* for example here is the summation of 5 values
		* (plus (plus (plus a b) c) d) e
	* we wish instead the syntax
		* a + b + c + d + e
	* to enable this: functions may have names with irregular characters and be applied by placing the arguments to both sides of them
	* disambiguation from the regular syntax
		* for example: how should the compiler know that '(x+y)' is the invokation of '+' with 'x' and 'y' instead of the invokation of 'x' with '+' and 'y'; to resolve this ambiguity many language designers decided to obligate the coder to disambiguate as follows: 
		* for function names with irregular characetrs
			* the invokation is as you would intuitively guessed
				* example: "x + y"
			* the normal reference is with round braces, 
				* example: "(+) x y"
		* those 2 examples denote the same thing
	* do not overuse this syntax
		* this is an irregular syntax, is to make chains of binary function applications neater; but outisde of this usage: they do not have advantage; but they do always have disadvantage relative to the regular syntax: it is often difficult to guess the meaning of the function from their irregular name, search for them on the web, pronounce them
* function composition
	* (>>>) : (x -> y) -> (y -> z) -> (x -> z)
	* f >>> g = fun x -> g (f x)  (<<<) = flip (>>>)
* partial function application
	\ links-to internal xbcsbisjcnxjnneu
* point-free style
	\ links-to internal oqmgrzzqokpkuawg
