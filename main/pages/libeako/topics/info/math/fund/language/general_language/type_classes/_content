\ id biuqwfqzzkpjuqob
* type classes are type interfaces that use static method dispatch
	* this is the difference from the object-oriented type-interface solution
* type classes is a langauge feature that does not make any additional type of abstractions possible but they give extra convenience
* type classes are very popular and it looks that in the future they will be part of most languages
* type classes were introduced by the Haskell language and Haskell always remained to be the testbed for new research in this topic and to have the best current implementation
* the name can be "type class" or "type interface", depending on the mood of the language designer
	* Haskell chose "class", Idris chose "interface"
* basics of type interface definition
	* interface Equatable t where 
		* (==) : t -> t -> Bool
	* "interface" is a keyword here
		* Haskell uses the "class" keyword
		* Idris uses the "interface" keyword
	* "Equatable" is the name of the defined type interface
	* "where" is a keyword separating the header from the rest of the code
	* the rest of the lines lists the methods of the interface
	* in static type interfacing we do not have the implicit input story; all the inputs are explicit and we must declare their types too
	* the language specification could fix the name of the type that is to implement the interface being defined [to "This" or "Self", for example], but Haskell-like languages usually choose to let the coder choose a custom name instead; this syntax design decision makes us able
		* to use short, usually 1-letter names, to make the structures of the types of the methods more readable
		* to have multi-type interfaces [where the interface is not of a single type but a combination of multiple types]
			* the usefulness of this ability is doubtful
* multiple methods in an interface:
	* interface Equatable t
		* (==) : t -> t -> bool
		* (/=) : t -> t -> bool
* default method implementations
	* interface Equatable t
		* (==) : t -> t -> bool
		* (/=) : t -> t -> bool
		* x == y = not (x /= y)
		* x /= y = not (x == y)
	* even mutually recursively
* an "instance" of a type interface is an implementation of a type interface for a given type
	* a simple example:
		* implements Equatable Int
			* (==) = Integer.equality
		* "instance" is a keyword here
		* (==) of 'Equatable' is defined by this implementation as the equation test provided by module 'Integer'
		* (/=) [not equal] does not have to be implemented, because the 'Equatable' class contains a suitable default implementation of it
	* the independence of the instance
		* the code of the instance can be either in the module of the class or in the module of the type; hence new instances can be introduced both for types and for classes whose code can not be modified
		* when the code of both the class and the type is not modifiable then an instance for them can not be defined directly; in such case the solution is to wrap the type with a new type
	* instance conditioning
		* example
			* instance (Equatable a, Equatable b) => Equatable (a b) where
				* (x1, y1) == (x2, y2) = x1 == x2 && y1 == y2
		* at the source side of the fat arrow is the condition
* usage
	* functions may take instances as implicit inputs
	* example
		* minimum : Ordered e => List e -> Maybe e
			* takes an implicit parameter specifying how interface 'Ordered' is implemented for type 'e'
* laws
	* "laws" are requirements that the instances must obey; additional to what the types of the methods of the interface impose; it is generally better to state requirements in types, but sometimes (because of the weakness of the type system) it is not possible or not economical; then we state them in comment and refer to them as "laws"
	* example
		* the laws of 'Equatable' should be the usual mathematical properties of equality: substitutivity
		* interface Equatable t where
			* (==) : t -> t -> Bool
				* // law "substitutivity": x == y <=> (for all f : f x == f y)
	* not all interfaces have to have laws
		* some examples for interfaces that do not have laws
			* Default
			* Foldable
				* you may know this from .Net as "Enumerable"
