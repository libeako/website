\ id xbcsbisjcnxjnneu
* this topic builds on
	* curried form of function
		\ links-to internal rjvsfevdnztyxdlz
* partial function application is an application of a multi-input function in curried form to less arguments than the function has by design
* the value of a partial function application expression is a function that accepts arguments for the rest of its inputs
	* formally:
		* f   : a -> (b -> o)
		* =>
		* f x :       b -> o
* function type right associativity is to allow us to omit the brackets
	* example
		* a -> b -> o = a -> (b -> o)
* function application left associativity is to allow us omitthe brackets:
	* examples
		* f x y = (f x) y
		* f x y z = ((f x) y) z
* usage example
	* increment x = plus 1 x
		* where
			* plus x y = x + y
* order of the inputs
	* to enable partial function application in greatest scope: inputs are often ordered flipeed to what imperative programmers are used to
	* examples
		* the example functions are
			* map : (a -> b) -> List a -> List b
			* filter : (a -> Bool) -> List a -> List a
		* this is their input ordering in functional programming
		* in imperative programming the order would be opposite, as the list input is the big one intuitively, the data
		* the advantage of this "reverse" order is hopefully demonstrated by this following usage example
			* filter_then_map : (a -> bool) -> (a -> b) -> List a -> List b
			* first attempt to define 'filter_then_map'
				* filter_then_map p f l = map f (filter p l)
			* it does not get much better with some "pipe" function application ["|>"]
				* filter_then_map p f l = l |> filter p |> map f
			* we can do much better by partial function application and function composition
				* filter_then_map p f = filter p >>> map f
			* to make ourselves able to use functions like 'filter' and 'map' such neatly is why the input orders of them are what they are
