\ id fjumpwympgxjnokk
* naming
	* by "ordinary function name": i mean things like "plus" "minus" "equal"
	* by "special function name": i mean thing like "+" "-" "=="
		* most coders name these with "operator"
			* i do not like the name "operator" because these things do not operate on their parameters any more or other way than the ordinarily named functions; the difference is only in the name syntax
* i dislike special names because 2 causes: their infix syntax order, their special character content; both these hurt the uniformity, hence the ergonomics of the text
* the problems of special names
	* the special names tell very little to the reader about the things they denote
	* usually special names can not be pronounced
	* special names are difficult to search for on the web
	* some coders [sometimes even good ones] feel affinity to special naming, which becomes a nightmare for newcomers to his|her code
	* their outside syntax is different too
	* they bring in the problem of precedense which sometimes is a pain to get right and to memorize and to maintain and changes to them may introduce bugs
* the only good reason for special names is chains of homogenous applications of binary function
	* example
		* x + y + z
		* is more readable than
		* plus x (plus y z)
	* heterogenous chains are rare and have precedence problems anyway
	* for homogenous chains let the languages support a special syntax like "fold plus '[x y z]", where ' would mean that the list after it is special, is a list of arguments to the function before it and its application should be inlined
		* this would eliminate the redundancy of "+" in "x + y + z", which smells like this is the right way
