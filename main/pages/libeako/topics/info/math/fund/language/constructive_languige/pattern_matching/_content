\ id ybfruhnhbcxrqyol
* pattern matching matches the the structure of a data value to the structure of a "pattern"
* pattern matching can be applied whereever a new name can be given [at name "bind" positions]; instead of a simple new name: a complex pattern can be given, containing multiple names perhaps
* the pattern can be so simple as a single name, in which case the situation is a normal name binding
* (sub-values in the matched value) are matched to (the names in the pattern), giving names by this to those sub-values
* a simple example
	* prelimiaries
		* a pair data type
			* Pair = (Man, Woman)
		* a value of the above data type
			* a_pair = (adam, eva)
	* pattern matching on the value
		* (xy, xx) = a_pair
	* explanation
		* "(xy, xx)" is the pattern
		* "xy", "xx" are new names to be bound to the sub-values of the matchedvalue
			* 'xy' binds to 'adam'
			* 'xx' binds to 'eva'
		* it is equivalent to introducing these names one-by-one
			* xy = fst a_pair
			* xx = snd a_pair
	* you probably already see advantages of pattern matching: it is often shorter, less repetitive, more readable, less error-prone
* some people say pattern matching "destruct"s the value; this phrase may be slightly misguiding for novices; of course: the value as an object in memory does not get destroyed or modified by pattern matching
* the "_" pattern matches anything
* pattern matching can also be used for branching, by giving multiple patterns, of which exactly one matching pattern is selected during evalutation
	* example
		* the following example implements the well-known if-then-else function
		* if_then_else : Bool -> t -> t -> t
		* if_then_else c a b =
			* case c
				* true  -> a
				* false -> b
	* the 'case' keyword introduces the "case expression"; the value after the 'case' keyword is pattern-matched on; the case-expression continues with the list of cases; each case has a (pattern -> value) form; the value of the case expression is the value of the first case whose pattern manages to match
	* the compiler should check in compile time that at least one of the patterns will match in runtime, with other wording: that the pattern matching is "exhaustive"
		* warning: the haskell compiler ghc does not check this by default, you have to turn it on with an argument to the compiler
* point-free case
	* for 
		* \ x -> case x ...
	* we have a point-free syntax sugar:
		* \ case ...
* pattern matching can reach sub-values at any depth
	* size : List e -> Integer size =
		* \case
			* nil -> 0
			* head :: tail -> 1 + (size tail)
	* the following example implements a size function for Lists which takes a List of Maybes and counts only the existing elements
	* effective_size : List (Maybe a) -> Int
	* effective_size =
		* \case
			* nil -> 0
			* (just _) :: tail -> 1 + (size tail)
			* none :: tail -> size tail
	* in this example pattern matching reaches not only the elements of a List value, but also inside the Maybe structure in it
* matching multiple values simultaniously is possible by building a tuple of those values and matching the tuple
	* example
		* unsure_sum : Maybe Int -> Maybe Int -> Maybe Int
		* unsure_sum a b =
			* case (a, b)
				* (just x, just y) => just (x + y)
				* _ => none
* match on function input with branching
	* some languages [for example haskell] provide syntax sugar to combine pattern matching on inputs of functions with branching
	* example
		* unsure_sum : Maybe Int -> Maybe Int -> Maybe Int
		* unsure_sum
			* | (just x) (just y) = just (x + y)
			* | _        _        = none
		* this could, of course, be done with a case-expression, but that would require us to first give names for the inputs
