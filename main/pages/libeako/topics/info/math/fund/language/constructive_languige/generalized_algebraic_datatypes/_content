\ id oornolrtruyzbntt
* these are a generalization of sum types; the generalization is that the constructors [the members] of the sum type specify their exact return type; of course: all constructors have to return a value that is of the sum type the constructor is a member of; but GADTs allow more precise specification of the return type; how can it be more precise? remember that types [as type functions], including sum types, can have inputs too; constructors of GADTs can fix those
* an example:
* datatype Expression =
	* | I Int
	* | B Bool
	* | Plus Expression Expression
	* | And Expression Expression
* we can construct values of this datatype: "Plus (I 3) (I 5)", "And (B True) (B False)"; these are valid expressions; but our current datatype also contain invalid values, for example "Plus (I 5) (B True)"
* the natural solution: we need to constrain 'Plus' to accept only integer expressions and 'And' to accept only boolean expressions; hence we need to distinguish bettween 'Expression's; the solution is to introduce a type input for 'Expression', indicating the type of the its value:
* datatype Expression v =
	* | I Int
	* | B Bool
	* | Plus (Expression Int) (Expression Int)
	* | And (Expression Bool) (Expression Bool)
* obviously: each constructor, only by being a member of 'Expression', return a value with type 'Expression'; but with what 'v'? the answer is that they themselves do not care, as by them: 'v' can be anything, they do not impose any constraint on 'v'
* we wanted the "Plus (I 5) (B True)" expression to become ill-typed; did it? 'Plus' constrains its input types; from this the type checker infers that both "I 5" and "B True" must have type 'Expression Int'; because the constructor 'I' and 'B' both return an 'Expression v', not caring about 'v': no conflict arises, hence the type cheker accepts the whole expresson; "B True" should have type "Expression Bool", but simple sum type construction does not allow us to specify that
* this is why we need to add this language feature: let the constructors specify their exact return types
* the usual syntax for this langauge feature is to let the constructors specify their types as functions:
* datatype Expression v =
	* I : Int -> Expression Int
	* B : Bool -> Expression Bool
	* Plus : Expression Int -> Expression Int -> Expression Int
	* And : Expression Bool -> Expression Bool -> Expression Bool
* with this type definition: "B True" has type exactly "Expression Bool", hence the expression "Plus (I 5) (B True)" contains a type conflict about v: 'Plus' implies it to be 'Int', B implies it to be 'Bool' => the invalid expression became ill-typed
* thus generalized algebraic data types provide us much more type-safety, while being a very natural and simple language feature, easy to understand, use and implement
