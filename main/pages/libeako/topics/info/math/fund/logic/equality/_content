\ id dxhxiloqezsthksz
* here i describe a propositional representation of equality
* equality is a 2-ary relation; but we surely would not consider all 2-ary relations as equalities; all task that remains here for us is to find good condition when a 2-ary relation is considered an equality
* derivation of the idea
	* my first intuitive idea for the definition of equality would be
		* 2 things are equal iff they can not be distinguished
	* with other wording:
		* 2 things are equal iff they behave the same way
	* a more precise expression of the condition is
		* iff all functions map the same output value to them
	* formally:
		* (x = y) := (forall function f : f x = f y)
	* this definition seems not valid because we still would need to know what equality is for all types to evaluate the assigned value to equality; but we will improve it, by constraining the set of output types for the 'f's to a single one; which one? bool is a good idea because it is a simplest type on which both true and false equality propositions can be constructed; this reduces (equality in all types) to (equality in the single simple bool type)
	* equality on the simple bool type is trivial:
		* { true = true, false = false }
	* the reduction of equality to the single bool type formally:
		* these statements are equivalent:
			* forall function  f : f x = f y
			* forall predicate p : p x = p y
		* i use word "predicate" here as a synonym of ordinary function whose output type is bool
		* proof of the equivalence
			* => is trivial
			* <= by contradiction
				* let us assume that x' y' are values of a type so that
					* forall predicate p :      p x' = p y'
					* exists function  f : not (f x' = f y')
				* p x : = (f x = f x')
				* substituting this into
					* p x' = p y'
				* we get
					* (f x' = f x') = (f y' = f x')
					* the left side of this is trivially true, hence the right side must be true too; we arrived to a contradiction
	* the definition of equality so far is
		* (x = y) := (forall predicate p : p x = p y)
	* it is circular
	* to remedy the problem for type bool too: i move the usage of bool to the meta level [the judgement level of the logic]
		* (x = y) := (forall proposition p : p x <=> p y)
	* from <=> to =>
		* it is enough to use implication instead of equivalence
		* formally
			* (forall predicate p : p x <=> p y) <=> (forall predicate p : p x => p y)
		* proof
			* => : trivial
			* <= :
				* predicate p is quantified universally
				* hence for all p: the statement (p x => p y) also holds for the negation of p
				* which gives (p x <= p y)
* by the former derivation: the definition of equality is
	* (x = y) := (forall predicate p : (p x => p y))
	* with natural language: equality is a relation along which the truth of all logical propositions is preserved
* validation
	* necessity
		* i do expect equality to preserve truth of all propositions
	* sufficiency
		* in the following
			* i will use that that these statements are equivalent, which was proved in the derivation of the idea
				* forall function  f : (f x = f y)
				* forall predicate p : (p x = p y)
				* forall predicate p : (p x => p y)
			* i list the properties of equality that i intuitively require:
		* substitutivity
			* (x = y) => forall f : (f x = f y)
				* proved previously during the derivation of the idea
		* equivalence
			* reflexivity
				* forall x : x = x
				* with my definition this is
					* forall x : forall proposition p : (p x => p x)
					* which is true trivially
			* symmetry
				* forall x y : ((x = y) => (y = x))
				* with my definition this is
					* forall x y
						* forall proposition p : (p x => p y)
						* =>
						* forall proposition q : (q y => q x)
				* proof: choose p := not <<< q
			* transitivity
				* forall x y z : ((x = y) and (y = z)) => (y = z)
				* with my definition this is
					* forall x y z
						* and
							* forall proposition p : (p x => p y)
							* forall proposition q : (q y => q z))
						* =>
						* forall proposition r : (r y => r z)
				* proof: choose (p := r) and (q := r) and use the transitivity of implication in logic
