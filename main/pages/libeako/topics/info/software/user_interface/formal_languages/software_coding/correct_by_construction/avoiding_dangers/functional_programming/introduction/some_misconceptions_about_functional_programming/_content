# id vrdegqmtgfexpvcv
* "the big reason to do functional programming is parallel programming"
	* functional programming helps much in parallel programming, but this advantage is just one of the many and one of the small ones; readability, bug-resistance, reusability, maintainability, equational reasoning, fun are much more important advantages
	* people were falling in love into functional programming starting from the 1960s, when multi-core processors existed not even at the idea level yet
* "functional programming needs math knowledge"
	* functional programming embraces a lot of math, for great good; but math in functional programming is a great option, not a requirement; it is possible to adopt, love and greatly benefit from functional programming without any math knowledge
* "functional programming has language feature x"
	* functional programming is a good language design decision; good language design is likely to have other goodies [like x]; thus the good language features correlate with functional programming; but this is only because of a common cause and not because some fundamental connection between functional programming and x
	* examples
		* "algebraic data types are functional programming features"
			* nope; theoretically they both could live without the other
				* algebraic data types could be implemented by non-functional languages too; even by c++; it is just a design decision that c++ does not do it [a wrong one]
				* even a purely functional language could avoid sum types for example by subtyping; it would be a bad design decision, because sum types are better choice, but it is possible, sum types are not a necessity of functional programming
		* "functional programming languages are strongly typed"
			* not necessarily at all; for example : the purely functional language "elm" has a weak type system; even purely functional language with no static type checking exists [for example : clojure]
* "functional programming, being higher level must be bad for runtime efficiency"
	* the situation is the opposite
		# links-to internal nmzlpnpnrsfmunrf
* "functional programming is about higher order functions"
	* though functional programmers use higher order functions a lot, they are not the main idea
* "functional programming is about immutability"
	* even some purely functional programming languages do allow mutation, inplace, for good runtime efficiency, they just need to be wrapped into functional wrappers
