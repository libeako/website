# id jiwpglhclkfxvqoh
* properly wiring exceptional return values through a long function call stack seems boring work; hence the "exceptions" were invented; their very design purpose is to opt out from the static type checking for the exceptional values of the return type
* this of course destroys the advantages of static type checking to the extent of the exception; one better scrap exceptions and instead use a type that is similar to Maybe but also stores the reason of failure; it is usually named with "Result" or "Either"
* exceptions are a language design mistake, because
	* one pays a huge price for not having to bother with propagating the exceptional value through the call stack: it becomes necessary to memorize the whole exception structure that became hidden, moving the system from the code and the static type checker to the coding human's head - this is a horrible deal, which brings big regret as the time goes, the code grows, colleagues become involved
	* propagating exceptional value through function call stack is much easier than most coders think - with the help of container layer swapping helper functions
		* link to (swapping container layers)
			# links-to internal nuckddbslvpvzupy
* this is the same story as with the null value
	* i wrote about that too
		# links-to internal fbctgaodsnjovfll
