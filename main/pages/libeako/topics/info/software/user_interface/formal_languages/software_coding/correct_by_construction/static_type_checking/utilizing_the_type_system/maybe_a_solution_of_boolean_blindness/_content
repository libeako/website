\ id ogxjrjwmhpamaeme
* here i present a partially applicable solution for the boolean blindness problem, via the Maybe type; it is very simple but surprisingly i have not encountered it anywhere, hence even though i am probably not the first one to think about it : at least i plug some gap in the advocating side
* once upon a time i had a client with a task from it : write a program that prints "hello world"; i implemented the program and it worked perfectly, my client was satisfied; but later the client wished a new feature : write an exclamation mark after the "hello world", but enable this feature only if a certain command line flag is passed [not everyone likes exclamation marks]; how should i represent internally whether to activate this feature? a computer scientist would immediately answer : the boolean type is the canonical solution to represent choice between 2 value [active, inactive]; but we software engineers know that a disadvantage of it is the boolean blindness problem : does 'true' mean that the feature is requested or that it is suppressed?; hence a software engineer would rather write a new type :
* data FeatureActivity = Enabled | Disabled
* the names in which unambiguously express the intent
* this solves the boolean blindness problem; but : i feel a bit bad about it; all we did is gave different names for the boolean type; it certainly solves the problem but feels a bit bad; a nicer solution would be to use the type system to distinguish between the 2 choices
* a general solution of ambiguity is generalization of the task; if we face a source code fragment which is ambiguous then perhaps the task that the code tries to solve is not general enough; this is because as we increase generality of a task : some solutions of the task become invalid; what would a natural generalization of the exclamation mark feature be?; different ways of printing the exclamation mark; for example using a specific color [read perhaps from the configuration file of the hello-world program]; then we need to pass to the printing function not only whether to print an exclamation mark, but also a configuration of how to print it; hence we need to introduce an ExclamationMarkConfig type; the type can be a singleton at the start of the development, when a color feature is not yet needed; then the choice whether to print an exclamation mark is represented by 'Maybe ExclamationMarkConfig'; it is then so unambiguous that the 'Just' case of Maybe must represent the feature is active case as it is with the FeatureActivity type
* but the Maybe solution has an extra advantage : 
	* it is naturally expectable that later the client will want some kind of coloring feature for the exclamation mark and then our code will be ready for the extension, all needed will be to add the appropriate data members to ExclamationMarkConfig; i see this as a strong sign that this solution is better than simply a renamed boolean type
* after i published this article on Facebook and when was just about to publish in Twitter i learned from a Twitter tweet about someone else's new article in this same topic
	* link to that article
		\ links-to external https://runtimeverification.com/blog/code-smell-boolean-blindness/
