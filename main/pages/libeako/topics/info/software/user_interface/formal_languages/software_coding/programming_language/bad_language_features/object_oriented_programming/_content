# id kgmqzsduacpzvbxy
* the year is 2018; object oriented programming is not alive and has not achieved any good till now; i know : this sounds surprising, seeing thw wide spread of OOP, but this section will explain 
* theoretical research about "object oriented programming" is not done currently in significant amount; the rest of this section deals with rather practical side
* what is object oriented programming?
	* to explain such bold claim that OOP is not alive : i should first define OOP; this task is more difficult than one might first think; its meaning is widely debated; when the meaning of a term is debated then a way out may be to turn back to the original meaning of the term; the term "object oriented programming" was coined by Alan Kay; the most informative text about his thinking about it that i found is "OOP to me means only messaging, local retention and protection and hiding of state-process, and extreme late-binding of all things."; to me this sounds like the actor model : the program consists of actors, that are independent of each other but interact with each other; the interaction is done via "messaging", which we now know as method invocation; at those early times OOP was thought about like the program consists of parts that are like cells in a body or individual animals in a complex living environment 
	* state mutation
		* it is important to see that Alan Kay thought about OOP as something that fundamentally involves mutable state; many people even till now think so; but state is perhaps the most "evil" thing in programming ; you may now defend OOP with the statement that functional programming is not to be applied for all programs; for example high efficiency programs may drop the functional methodology at certain places; but : note that these high efficiency programs are relatively rare, most programs are written at the application level, where functional programming is not only efficient enough but is even more efficient than imperative programming; and even in highly efficient programs : the highly optimized parts of it are small compared to the full size of the program; thus the scope of legitimately using imperative mutable state is very small; and even in that small scope : OOP is not good fit because some other aspects of it [dynamic memory allocation, late binding] is usually incompatible with high optimizability of runtime efficiency; thus we arrive to the conclusion that OOP does not have any place
			* link to 'functional programming'
				# links-to internal rqeeitsvmgrogdjp
			* link to (runtime efficiency of functional programs)
				# links-to internal nmzlpnpnrsfmunrf
	* anything else?
		* but this is just one interpretation of "object oriented programming"; one "modern" view of it is that mutable state does not have to be considered a part of it; this view is strongly reflected by the scala programming language for example
		* an "object" is a value coupled with the memory part it is stored in; the only reason to distinguish between different objects with the same value is the possibility of mutation; hence with dropping mutation from our toolbox : we drop "object"s too; hence the name "OOP" looses its original meaning; hence "functional OOP" contains a striking contradiction at least as a name 
		* but supposing the necessity to occasionally accept historical mistakes in terminology : this section continues to investigate the merit of functional OOP; what it is or at least what is widely thought it is?
		* in the following i use comparison to the haskell programming language which is considered to be not an object oriented language; thus i allow to myself to exclude from OOP any feature that is in haskell
		* an other fundamental component of OOP is late binding; at least Alan Kay thought so ["extreme late-binding of all things"]; and this view is reflected by the current mainstream OOP languages : everything depends on a special, implicit first input : a "this" or "self" object; i consider late binding a legitimate feature, but i think that making it a base of type interfacing was a programming language design mistake; this is nicely demonstrated by the contrast with the haskell solution of type interfacing ["type classes"] which builds on static dispatch by default; the static strategy gives vast improvement in runtime efficiency [because of inlining], type inference, most importantly: domain modeling capability [including nullary methods, conditional implementation, late implementation]
			* link to (type classes)
				# links-to internal biuqwfqzzkpjuqob
		* if we would drop late binding too from the definition of OOP then what would remain of OOP? 
			* run-time type testing ? - even the OO culture considers it a dirty practise, to be avoided
			* methods inheritance between interfaces ? - not a significant feature
			* dynamic binding ? - haskell also has it, though with more code verbosity
		* i did find though one important thing that distinguishes OOP languages : they base their type interfacing on late binding; not only base, but constrain :  static methods may not be in OOP type interfaces; i fail to see any advantage that this constrain can give; type classes are much better
			* link to (why type classes are better)
				# links-to internal biuqwfqzzkpjuqob
* main conclusion
	* till here i came to the conclusion that OOP is mainly state mutation and unnecessary push of dynamic binding; the earlier ruins our software coding efficiency, the later makes type interfacing hardly usable; giving nothing significant in return that we would expect from a programming paradigm
* shame on OO type interfacing
	* oo wants to be a paradigm; but a paradigm should be generally applicable; oo interfacing is not generally applicable; it is too ugly and too weak; as you saw from the examples : not only it can not express such basic type interfaces as Equatable and Comparable in a natural way, but even if we accept its ugliness : so soon as wrapping our [now equatable or comparable] type by a Maybe or other container : the oo type interfacing can not follow us; and for interfaces with input-less methods, like the very important Monoid interface : it can not even start
	* one of the roots of the failure of oo is one of its foundational principle that method dispatch should be dynamic; in the world of type interfacing : this is corrected by type classes
* why did OO spread ?
	* if OOP would be so clearly bad then why did it spread so widely? because the languages that pushed it became popular; but those became popular not because of OOP but each for some unrelated reason; for example java, c# were backed by big companies, java additionally promised "write once, run everywhere", c++ did not have a competitor
* OO mania
	* it is not only the languages, but culture too; so named "OO design patterns", "OO design", "OO architecture" flud the industrial software development world; i think that was a mistake
	* i am not familiar with the "OO design patterns", but i want to show you that they are not valuable; hence i searched the web for OO design patterns and found
	* a website listing many of them
		# links-to external https://www.oodesign.com/proxy-pattern.html
	* i worked through all of them, here are my quick impressions about them :
	* the list
		* "decorator"
			* = let us decrease the inheritance hierarchy, by replacing some inheritance with aggregation
			* but : realizing that a more basic language construct [product type] is more adequate than a more involved one [inheritance] is not a "design pattern"; because to apply the more involved language construct is not a task to be solved
		* "flyweight"
			* = data reference :-) ["pointer" if you like]; yes : some people think it needs a different name and articles
		* "factory"
			* = stream
		* "composite"
			* = tree
		* "strategy"
			* = second order function, which is just function with function input : (x -> y) -> r
		* "command"
			* = special case of "strategy", where the input function is an action
		* "builder"
			* = special case of strategy, where the input function produces something instead of performing an action
		* "singleton"
			* = lazy initialization + mutable global state
		* "state"
			* = access control + mutable state
		* "null object"
			* monoid
				# links-to internal cabjryjnnstdjmvb
		* "template method"
			* = "strategy"
		* "prototype"
			* = changing things slightly = optics
		* "interpretation"
			* = denotational semantics
			* in this role sum types work better because in a language the constructs [the production rules] are usually not extensible
		* "iterator"
			* = imperative traversable
				* see (Jeremy Gibbons and Bruno Oliveira : "The essence of the Iterator pattern")
					# links-to external http://www.cs.ox.ac.uk/people/jeremy.gibbons/publications/#iterator
			* this is an example of the rare situation that the OO style is easier to understand, more intuitive
		* "visitor"
			* the action performed by the "iterator"; "iterator" and "visitor" are 2 components of a single design pattern
		* "memento"
			* = cloning, which is not needed with the absence of mutation
		* "observer"
			* is an inherently OO solution; because it extends updating [an imperative thing] and designates a central object through which to drive the update; a perfect example for domain is user interface; i am not knowledgable in the domain of UI but i know that functional UI exist and its practitioners like it; at first thought it seems closest to the concept of traversal in functional programming; the OO version is more simple and intuitive
		* "bridge"
			* i did not understand this one in the 10 minutes i was willing to spend on it
		* not OO specific
			* "resource pool"
			* no real relation to  OO
				* "proxy"
					* = layering
				* "mediator"
					* seems to be equivalent to a 2-input function
				* "adapter"
				* "chain of responsibility"
	* i hope i understood most of them correctly
	* note that for most of them at least one of the following statements is true
		* involves mutable state; though in a few cases the functional equivalent is less intuitive : altogether the functional [controlled] state handling is almost always a better solution because of the enormous advantages of functional programming
		* just renames some very simple notion
		* unnecessarily overcomplicates some very simple notion with OO clothing
		* no real relation to OO [its categorization into "OO design patter" is incorrect]
	* how did this OO overusage evolve ?
		* certain very popular OOP languges [java, c#] initially lacked essential language features [first class function, parametric type polymorphism, sum type] and by this they forced their users to use subtyping for all polymorphic problems; hence OOP became overused and people got used to overusing it
* without OO
	* can we do without OO? fortunately we already have enough practical experience to answer this question with confidence; in scala and haskell people are fine without OO; haskell does not provide OO and its users do not miss it; scala provides the most capabilities for OO among the popular industrial languages [variance, mixin inheritance, type members]; still : OO is fading from scala; the well-known scalaz library [whose authors are very knowledgable in both the technicalities of scala and in library level abstractions] chose to say goodby to OO; in both haskell and scalaz programmers rather use alternatives : the functional paradigm, higher order functions, parametric type polymorphism, type classes
