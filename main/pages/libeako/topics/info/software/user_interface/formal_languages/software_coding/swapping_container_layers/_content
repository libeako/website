# id nuckddbslvpvzupy
* here i introduce an often occuring coding pattern; it is related to containers; by container i mean things like List, Array, Maybe, Either, ...
* consider composite containers with 2 layers :
	* x (y t)
	* where x and y are container types and t is an unknown type of the elements they store
* the main message of this section : one often wants to swap the 2 layers of such composite containers :
	* swap : x (y t) -> y (x t)
* a concrete example :
	* suppose
		* y = Maybe x = List
	* then
		* swap : List (Maybe t) -> Maybe (List t)
	* such a function is what we need for example when the Maybe is used instead of thrown-and-caught exception : the swap function transforms a list of potentially not existing results to a potentially not existing List of results; Maybe is adequate to represent only the most primitive exception but one can trivially upgrade it to the Either type; one also is likely to want to have such swap function for container types other than List; with such swap functions in hand one can comfortably replace the usage of null values and exceptions with the simple type-safe solution of propagating the exceptional value through the function call stack
* the implementation of these swap functions are usually trivial
* if you did not yet know about this idea then i recommend you to keep your eyes open for the possibilities of using them and you will likely find plenty [especially if you use functional programming] and these swap functions will ease your coding work substantially
* to increase your appetite : here are some more examples
	* you may become surprised how many things are containers [at least in an abstract sense]
	* function
		* swap : x (r -> t) -> (r -> x t)
		* where the y = r -> t function is a container of its output
		* this swap function can be used to push dependencies outward
	* parser
		* swap : Date (Parser Int) -> Parser (Date Int)
		* where Date is a 3-element container and Parser is the container of the value that it reads
		* this swap function produces a parser of Date from a parser of integer
* naming
	* one may want to prefer the name "transpose", as motivated by the transpose operation on matrixes
	* haskell uses "sequence"
* the number of swap functions
	* one problem with these swap functions is that it is boring to write them; in case of m different x container types and n different y container types : one may need to implement asymptotically m*n swap functions
	* in programming languages with type function polymorphism this can be decreased to just 1
		* link to 'type function polymorphism'
			# links-to internal eyfagqcuwwajcnmt
	* alternatives
		* via distributive functor
			# links-to external http://hackage.haskell.org/package/distributive
		* via representable functor
			* transpose :: (Representable f, Representable g) => f (g x) -> g (f x)
			* see
				* representable functor
					# links-to internal mkybecwcndywdoos
		* via Traversable and Applicative
			* sequence : Traversable x, Applicative y => x (y t) -> y (x t)
	* then one only needs to write the implementations of the interfaces (Representable or (Traversable and Applicative)) for its container types; this brings down the asymptotic amount of coding work to m+n
	* this is a nice example of how type function polymorphism is important in keeping the amount of code low
