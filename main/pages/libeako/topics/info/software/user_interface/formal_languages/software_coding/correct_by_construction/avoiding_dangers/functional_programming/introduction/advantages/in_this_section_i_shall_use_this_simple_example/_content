# id nxwwqhqhdzpldxms
* description
	* it is the well-known "dotproduct" function from linear algebra
	* it takes 2 vectors, both with n scalar components, multiplies them component-wise and sums these multiplication results
* the competing implementations
	* imperative
		* c := 0 for (int i = 0; i < n; ++n)
			* c := c + a[i] b[i]
	* functional
		* uncurry (lift2 (*)) >>> fold 0 (+)
		* some explanation
			* '>>>' - function composition
			* 'lift2' - lifts a 2-ary function (from the space of scalars) (to the space of vectors of scalars of the same length)
			* 'fold i f c' - combines the components in collection c with 2-ary function f starting from the initial value i
			* 'uncurry' - serves  a technical task
				# links-to internal rjvsfevdnztyxdlz
* first intuitions
	* the functional version looks overly abstract
		* in reality just it is alian to you, you are not used to its ingredients; they are very commonly used in functional programming and are provided by base libraries
	* the imperative version looks very simple to understand
		* in reality it has serious problems compared to the functional version, just they are
			* not obvious to you because you are used to accept them not knowing how much better is possible
			* hiding behind the artificial simplicity of an educative example; real world complexity is what makes these problems severe
