# id iarklboiropwlnyf
* equational reasoning in functional programming enables high level program transformations for runtime efficiency increase
* example
	* in absence of side effects : ((map f) >>> (map g)) is semantically equivalent to (map (f >>> g)); but the later one is more runtime-efficient, because it iterates the collection once [with the function (f >>> g)] while the former one iterates the collection twice [first with function f then with function g]; hence it is worth to perform the transformation
	* but if side-effects may be present in f or g then the 2 versions are not necessarily equivalent
		* for example
			* imagine that both f and g logs its name; then
				* ((map f) >>> (map g)) logs ff...fgg...g
				* (map (f >>> g)) logs fgfg...fg
			* so their logs are different, thus they are not equivalent
* in haskell such optimization transformations can be specified by the coder, to then be automatically performed by the compiler
	* library authors often write such rewrite rules for their functions
	* the best thing about such automatic transformation compared to manual ones is that the automatic one is performed by the compiler, hence it is performed across function- and library-boundaries too
