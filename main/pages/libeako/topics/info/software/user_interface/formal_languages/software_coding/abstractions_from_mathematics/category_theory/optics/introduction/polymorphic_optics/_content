\ id kaxoqdfxxdoqokez
* the generalization of lens
	* a lens can be used to change a member of a product
		* for example
			* set : Lens y (x y) -> y -> (x y) -> (x y) 
			* set lens new_y old_pair = ...
			* y is changed in the pair to the new_y value
	* so far i used a simple typing scheme : the new value of the content data had the same type as the old value; but for example in the case of tuples : it is possible to replace a member of it with a new value of any type; and this is true not only with tuples, an other class of such types are ones whose member types are parameters of the container, for example :
	* let KeyValuePair k v = { key : k, value : v }
	* with such types all around us the wish arises to extend the typing of the optics so that changing not only the values, but also the types be possible; one solution is to have more type parameters of the optic; instead of a single container and a single content type, it will have 2 of each : one for the old and one for the new version of it; that is 2 2 = 4 type parameters
	* short notations of "old" and "new"
		* "o" = "old", "n" = "new"
	* by the above described generalization the lens type becomes this : 
	* let Lens eo en co cn = { get : co -> eo, set : en -> co -> cn }
	* such generalization of optics makes them more polymorphic, hence their popular "polymorphic optics" name
* generalizing the type of lens was intuitive; that is why i started with it; now let us move on to the other ones
* the generalization of isomorphism
	* just because we make the type more general, its structure should remain the same, that is : it still should consist of 2 conversion functions; but the type of the conversion function now should change; hint to understand : an old container is needed to get an old content, a new content is needed to get a new container
	* let Isomorphism eo en co cn = { get : co -> eo, build : en -> cn }
* the laws
	* how does this generalization effect the laws?
	* this new type of isomorphism looks strange and suspicious at first glance; isomorphism has a simple law : its 2 conversion functions must be inverses of each other, but with this new general typing the conversion functions do not even look composable; but note that when the law can be proposed [when the typing allows composition [when eo == en and co = cn]] is still a special case and we can require the law to hold at least then; that is better than nothing, but it still feels bad that in the other cases this data type seems to be out of control of the law; in such cases we usually turn to parametricity, hoping that it constrains the value set of the general type to sensible values; [if you do not understand this reasoning then do not be afraid, because i was very hand-wavy and i do not really understand it either; to achieve parametricity we would want to make the container and content types parameterized by the old-new choice
		* link to 'parametric polymorphosm'
			\ links-to internal kmzluqnwmjudyuht
	* let Lens e c  = forall o n . { get : c o -> e o, set :  e n -> c o -> c n }
	* let Isomorphism e c = forall o n . { get : c o -> e n, build : e o -> c n }
	* this would be nice, but unfortunately the typesystems of some programming languages [including haskell] is not flexible enough to work with this
		* because
			* neither type families nor type synonyms can be applied partially [at least in Haskell]
			* newtype-ing introduces wrapping noise
	* perhaps this technical constraint of our programming languages will cease at some time in the future; but for now i choose to use and teach the theoretically suspicious, but in practise everywhere usable typing of optics, the one with 4 technically independent type variables; this is the path chosen by the most popular optics library ["lens"] in haskell and a major optics library in purescript ["profunctor-lenses"]
	* but please keep in mind that this independence between the type parameters is only technical; you probably should still constrain yourself to use it only for the cases which can be expressed by the theoretically nicer typing too; with other words : we fall back to use the practical typing because of technical necessity and not to hack with out-of-concept optics
* the generalization of prism
	* a first guess could be :
	* let Prism eo en co cn = { match : co -> Maybe eo, build : en -> cn }
	* but this is not complete; a prism must be able to lift a function from the content level to the container level; for that we can use the 'build' function; but build works only based on the element; but what if the old container does not contain an element? then the new container is the old container; at least so it was in the simple typing; but now the type has to change; we need to be able to change the type of the container in the case too when it does not actually contain an element; such a case splitting is already present in the 'match' function; however it is about the complementer case; the straightforward solution is to extend that case splitting with the other case : 
	* let Prism eo en co cn = { match : co -> Either cn eo, build : en -> cn }
	* i replaced (Maybe eo) with (Either cn eo), introducing the new type of the container
* the generalization of traversal
	* is trivial
	* let Traversal eo en co cn = forall f . Applicative f => (eo -> f en) -> (co -> f cn)
* less bugs
	* by this generalization [as with any towards parametric polymorphism] : we also gain defence against some bugs in the implementations of functions around optics [for example of the 'compose' and 'lift' functions], which gain even alone is worth the extra complexity in the typing [at least in an implementation layer]
		* link to 'parametric polymorphism'
			\ links-to internal kmzluqnwmjudyuht
