\ id kaxoqdfxxdoqokez
* optics can replace the focused data with a new one; the new one obviously can have a different value, but also a different type; this is the case, for example, with tuples as containers; new tuple can always be formed, regardless of the type of the new value of its components; to enables optics types for type changing: they need to have more type parameters [they need to be more "type-polymorphic" [hence the name "polymorphic optics"]]
* the ideal solution is to introduce stage parameters (old and new)
	* short versions of "old" and "new": "o" = "old", "n" = "new"
	* the more polymorhic versions of some of the optic categories
		* let Lens e c  = forall o n . { get : c o -> e o, set :  e n -> c o -> c n }
		* let Isomorphism e c = forall o n . { get : c o -> e n, build : e o -> c n }
	* the laws stay the same, we just express them with (o = n)
* doubling the type parameters
	* unfortunately the 'stage parameters' solution is problematic in the practice of Haskell, because Haskell does not yet support partial application of  either type families or type synonyms and newtype-ing would introduce wrapping noise; hence a less ideal but more practical solution is used: we just double the normal type parameters ["c" = "container", "e" = "element"], each of them will have 2 versions, corresponding to the 2 stages
	* examples
		* Lens eo en co cn := { get : co -> eo, set : en -> co -> cn }
		* Isomorphism eo en co cn := { get : co -> eo, build : en -> cn }
		* Prism eo en co cn _= { match : co -> Maybe eo, build : en -> cn }
		* Traversal eo en co cn := forall f . Applicative f => (eo -> f en) -> (co -> f cn)
