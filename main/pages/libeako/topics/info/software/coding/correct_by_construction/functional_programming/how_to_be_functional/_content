\ id ikqxdpeebyuocqcu
* requirements are none, but some support from the language is very useful
	\ links-to internal nnktlttxsmtkjnnc
* in any language
	* simple local variables 
		* do not change them, instead make a new one for the new value
		* trust the compiler in optimization for efficiency [variable life analysis]
		* the compilers perhaps do this under the hood anyway
			* see static single assignment
				\ links-to external https://en.wikipedia.org/wiki/Static_single_assignment_form
	* loop
		* wrap the loop control structure into a pure function:
			* loop : (State -> Bool) -> (State -> State) -> State -> State
			* loop condition iter s =
				* if condition s
					* then loop condition iter (iter s)
					* else s
		* the 'for' and similars are just specific versions of the loop, wrap them too
	* collection
		* instead of traversing a collection with iterator | enumerator use a "fold" function:
		* fold : (initial_value : t) (combine_values : t -> e -> t) (collection : c e) -> t
		* in the .Net base library such a function exists with name "Aggregate"
	* effects
		* in functional programming effects are possible
		* just they happen not to the side, hence they are not side-effects; instead they are returned by the function as a value that represents an effect [perhaps by representing an action]; by this the function only computes the effect, does not perform it, thus remains pure
		* you can do this (delegating the performance of effects up) in java and c# too
	* you may want to wrap state modifications by functions such that the state becomes input and output of the functional functions
		* then a sequence of state-changing instructions may become functions chained together with function composition
* switch programming language
	* if you are using an imperative language i encourage you to change to a functional one; at least for weekend coding; it is not a waste of time to learn a good functional language; they are going to take over the software engineering world anyway
	* functional languages do not punish you for being functional, hence with them you are more likely to fall in love with functional programming; after that you will be more brave to embrace functional programming even in non-functional languages
	* which language?
		* some people find it useful to start with one that does not have much capability; to avoid distractions; one such popular language is Elm; its type system is weak enough to make it impossible to express abstract mathematics, hence you will not find those anywhere near Elm; thus Elm's type system being weak is a feature that provides you with a safe learning space for functional programming; Elm is a way for those who want to step one at a time
		* but it is not necessary to start with a weak language; once i needed to write a small static website generator program; i was very noob, i even did not know what monad is, still i managed to write the program in Haskell by restraining myself to only the essential features of it; it was not difficult, you can jump straight into Haskell too
* advanced
	* achieve mutation by laziness
		* by travis ...
			\ links-to external http://travis.athougies.net/posts/2018-05-05-dynamic-programming-is-recursion.html
	* fix-point combinator
		* a very good explanation of the fixpoint combinator "fix" in Haskell
			\ links-to external https://www.vex.net/~trebla/haskell/fix.xhtml
	* recursion schemes
		* Kwan: unfold and fold 
			\ links-to external https://kseo.github.io/posts/2016-12-12-unfold-and-fold.html
		* Traversing syntax trees [Twan van Laarhoven]
			\ links-to external https://twanvl.nl/blog/haskell/traversing-syntax-trees
