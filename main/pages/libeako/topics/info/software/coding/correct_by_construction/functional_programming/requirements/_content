\ id nnktlttxsmtkjnnc
* technical
	* these are very useful
		* tracing garbage collection
			* because of the absence of mutation : creating new objects is a significant trait of functional programs
			* a tracing garbage collector enables it without
				* fear of many small object degrading the runtime efficiency
				* hassle of keeping track of circular references
		* first class function type
			* for functions whose input or output is function too
		* let expression syntax
			* in the implementation of a functional function everything is just an expression
			* one often wants to define symbols within the scope of an expression
	* but nothing is strictly necessary
		* i coded in c# for 1-2 years, in functional style; c# tried to punish me for it, but i insisted - for great good - it helped me immensely; my task was complex with many occasions having to refactor the implementation due to external requests - now i feel that i would not have been able to handle the task without functional programming
		* even for c++ coders, who can not avoid all side-effects : just leaning towards it brings big gain in programming efficiency
* coder skill
	* no skill or knowledge is necessary for functional programming; just try to avoid side effects, so much as you comfortably can
* schedule
	* it is possible and okay to do the adoption of functional programming gradually
	* whatever your obstacle you feel is [technical or cultural] : do not worry about it; you do not have to devote your self or your project fully to functional programming; instead : just lean towards it; if you feel you can avoid a side-effect with reasonable cost then do it; even avoiding only some of them is already very useful; you should not give up just because you leave some side-effects, just try to minimize them
