\ id wdfyijgzinmnmzpn
* some beginning part of this content is also available as
	* my free book
		\ links-to external https://drive.google.com/drive/folders/1kiFr_OGXP6olNQjmShaPeCXiKhnA08Rp?usp=sharing
	* the book probably has better quality
* this part of my site is for the average industrial programmer, who works all day, in an industrial language, like Java, C++, or any non-typed or imperative or object-oriented language; i want to show you much better methods and programming languages to code with
* you can think of this content as a book, a walkthrough, an order of topics and references to guide and more importantly: motivate you through 
* the same journey as i went
	\ links-to internal ruwyqtccsonzjloi
* this walkthrough will cover the road from JavaScript to Idris
* why is these knowledge good
	* emotional advantages
		* decreases frustration
		* increases fun
	* practical advantages
		* hugely decrease the bug-prone nature of coding ["correct by construction"]
		* first implementation of a program is much faster 
		* understandability, maintainability, refactorability are much easier
		* more modularity
	* they make the coding work about [3-10] more efficient compared to the average industrial practice
	* their destiny is to take over the coding world, because they are natural very useful
	* they fundamentally changes how coders think about the code and even about its task
* the steps
	* the industry-academy gap
		\ links-to internal ezrdpkjrokawnikj
		* history of programming methodologies
			* both industrial and academic and their relation
		* why does the industry behind the academy by multiple decades?
	* some basic language notions
		\ links-to internal jaxbiyrfnbhaormb
		* both concepts and syntax
	* static typing
		\ links-to internal crulbcjvhzgpkjis
		* i claim that dynamic type checking does not have legitimacy in normal programming tasks; normal programming languages should be statically typed
	* functional programming
		\ links-to internal rqeeitsvmgrogdjp
		* this is an easy and beautiful topic; also probably the most bang for the buck; [though not equally well but] can be used in any programming language without preparation
	* have a break
		* i recommend you to have a time break here; spend some time coding functionally; get to the point where you get it, like it, feel its superiority; the rest of the journey is more advanced; more difficult to understand; for it to make sense, click in: it helps to have some practical experience with functional programming
	* type parametricity
		\ links-to internal iuvbupavbjmhfrxj
		* a coding paradigm of generality [by parametric type polymorphism], a simple, very cheap technique to improve software-correctness and source-readability
	* abstraction by mathematics
		\ links-to internal flktedmyhawaehus
		* "design patterns" done well
		* the super-power of compositionality, taken from the well-established mathematical field abstract algebra, especially category theory; i explain only the very basic, but very useful concepts: monoid, functor, applicative, monad
	* proposition as type
		\ links-to internal kdtdlfyrudrcnrrl
		* strong connection is between programming and logic - the "proposition as type correspondence"
		* this is a beautiful topic; the most interesting thing i ever learned in programming; it shows how programming and logic are the same thing at a certain level, via a surprisingly simple connection; this connection makes us able to use a single simple programming language to not only implement software but also:
			* model its domain
			* state mathematical theorems about the domain
			* prove those theorems and have the compiler verify the proofs
			* specify the software and have the compiler verify the correctness of the implementation according to the specification
	* a little more category theory
		* some trivial knowledge, very good (usefulness / difficulty) value:
		* isomorphism of objects
			\ links-to internal qxijfmdcfenjblwc
		* duality
			\ links-to internal yimhrxhreprkjkfk
		* contravariant functor
			\ links-to internal fhdcexkhowvzxltx
		* profunctor
			\ links-to internal evecfkoaaczzekya
	* optics
		\ links-to internal ndgkrnbojyputpec
	* arithmetic of data types
		\ links-to internal criytwacwdgeqemu
