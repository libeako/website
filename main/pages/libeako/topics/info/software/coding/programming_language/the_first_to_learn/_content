\ id njbmaqiznfzdylnr
* this is last maintained in 2024-06
* i as a programmer was asked multiple times: which programming language an aspiring programmer should learn first; now i think i have the answer settled in my mind
* it is Elm
* because
	* it is functional
		* see functional programming
			\ links-to internal zxsbxwlppaypmpnn
	* it is simple
		* it is high level; the programmer does not need to deal with [and hence learn] low level things like memory management
		* its type system is weak: lacks even type function polymorphism; this prevents Elm coders to use abstractions that are difficult for a beginner coder [like monad]; hence all the material one can find on the web related to Elm is without these advanced topics - this makes Elm a safe space to learn first only the basics of coding
		* most importantly: it does not contain bad features that are present in many highly popular programming languages
			* example of bad features that Elm does not have
				* object orientation
					\ links-to internal kgmqzsduacpzvbxy
				* null values
					\ links-to internal fbctgaodsnjovfll
			* such features not only make the learning significantly more difficult but also mislead the beginner to incorrect knowledge and bad coding style
	* ease of simple web GUI construction
		* this is not necessary to learn coding, but beginners often want it
* too simple for professional use
	* one of its advantages is also its big disadvantage: it is too simple; the most hurting problem is the lack of type-function polymorphism; hence if one wants to move beyond the baby steps then eventually must switch to a more advanced language; for that Haskell is a perfect choice
		* link to (type-function polymorphism)
			\ links-to internal eyfagqcuwwajcnmt
