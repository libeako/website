\ id xgasjmlsnagvmvom
* a praise
	* the Haskell compiler ["The Glasgow Haskell Compiler"] is one of the most successful software projects of all human history till 2024, it is a shining star, that shows some hope in the darkness of usual software development practice
	* it is built on a beautiful dream of a concept: lazy purely function programming
	* initially multiple compilers existed for Haskell, but after time the success of GHC kicked out its competitors
	* it became industry-strong, in most high level areas
		* a testimony
			\ links-to external https://youtu.be/riJuXDIUMA0?t=3m17s
	* it is leading the development of language and compiler technology; already before C#'s release, in 1998: it was more advanced then C# is now in 2024; i estimate that it is about 30 years ahead of industrial programming languages
	* Haskell not only leads the way, does the difficult job of real bleeding edge research but it does it 
		* even faster than industrial languages [like C#, Java] can keep up copying from Haskell the successful research results
		* mostly with backward compatibility and remaining industry-strong in its correctness
		* from a budget probably multiple times smaller than those of the industrial languages
	* all this success is due to the great work its authors performed; special praise is deserved by Simon Peyton Jones, who is the father and leader of the compiler
* warnings recommended to turn on
	* https://functor.tokyo/blog/2017-07-28-ghc-warnings-you-should-enable#fn2
* Simon Peyton Jones
	\ links-to internal yjuspwkoubzgucdh
* managing multiple versions
	\ links-to external https://qfpl.io/posts/multiple-ghcs-ghcup/
