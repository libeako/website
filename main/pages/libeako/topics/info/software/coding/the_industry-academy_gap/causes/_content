\ id eniwgmsvrhugbrdk
* most of the used programming languages are wrongly [even idiotically] designed; the most notable exception is Haskell which shows a right direction; but the industry does not look at it, does not care about it; the gap between Haskell and the other [the stupid] languages grew very big
* why did the gap grow?
	* because the languages that derailed the coding industry from the right direction became popular; not because they were good but each for some other reason
		* Java promised "write once, run everywhere"
		* Java and C# were backed by big companies
		* C++ did not have a competitor
* why did the gap stay?
	* the network effect
		* for compatibility and reusability
	* the herd effect
		* it always seems safer to go where the herd goes
	* the industry does not know that it could do much better, they do not even suspect that
		* most of the problems in the industry are grown from the popular programming languages being wrongly designed
		* the industry
			* Philip Wadler, a famous researcher: "for many years people in industry have managed to pretty much ignore everything we do"
			* the industry people do not know about the Haskell world and do not imagine that they can be of any good
			* i
				* when i was a beginner coder: for several years i thought the following
					* what the academy people do is only mental masturbation; they think about mathematical problems that interest them, but are not helpful in everyday coding practice
					* coding is mainly about fighting complexity and bugs, practise and not theory is what helps in that
					* coding is a very practical activity, hence may be known only by the people who do the practice, who are industrial coders, who do it full time, for many years; language researchers code very little
					* if some academy knowledge was good for anything then practitioners would know about it; after all: the whole globe would not let something useful in waste
						* one problem with this is that if the portion of people thinking so is most of the people then the rest is too little to wake the majority up
					* math is important in algorithm design, but why would it be even just slightly useful in coding?
				* when i learned the basic results of the Haskell world: i realized to my amusement: all of these previous presumptions of me were wrong
				* i guess most industrial people make these same thought mistakes that i did
			* the language users ["coders"]
				* according to my observation of how coders usually choose programming language and programming methodology:
				* they learn technologies that are demanded in the industry, to make money
				* mostly they do not look further than where they get a job, to learn good but rare technologies, because they are loaded with other tasks to do
					* this is correct behaviour by them, it would be horrendously inefficient if ordinary coders had to learn programming theory, language design and such
			* the industry language designers
				* are the ones who make the mistake; it is their fault that their products [the languages] are bad; the industry langauge designers are 
					* very amature, despite having been doing this kind of work for decades, despite most of the coding world using their products
					* professional idiots
						* they are idiots in their professions
						* they are professionals in being idiots
							* as they still manage to convince most of the world to use their idiotic languages
					* these people should leave, in shame and be replaced by people who know that the proper [high level] language are like Haskell and Lean
			* busieness managers
				* are the ones who could change the language designers; they are the bosses of the language designers; but they do not know about the problem; they look at the users of the languages and see mostly satisfaction, no screaming problem; they should hear screaming, somebody should scream at them to wake them up
		* the Haskell world
			* does not scream; they just share their results, tell that they like these results, but do not push the results onto the industry; they do not initiate discussions, let alone debates about the mistakes in the industry language designs
				* one cause of this is that the academy and the Haskell world are too polite to tell the dark truth about the popular languages
					* this is partly because the industry is mainly controlled in the West, where overly politeness is almost necessary to get along in any company politically; i, for example, was banned forever from r/functional-programming, because i wrote that the other [than Haskell] languages are "stupid" and insisted that i was correct to write that; but without saying that out so: the business managers will not know that; they will continue to think that the popular languages are mostly okay; it is not possible to raise attention to the severity of the problem without being honest about the severity of the problem; phrasing the message with politely distorted words will stop the real message from spreading
