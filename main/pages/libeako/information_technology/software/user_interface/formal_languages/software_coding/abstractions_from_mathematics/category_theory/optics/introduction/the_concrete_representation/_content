* i implemented all the science in this part of the tutorial in haskell
	* link
		# links-to external https://bitbucket.org/libeako/haskell-fana/src/default/Haskell/Fana/Optic/Concreter/
* laws
	* i will express the laws via the accessors of the optic category under examination; for clarity : in the application of the accessor functions : i am going to omit the argument for the optic parameter [as it is the same optic value in the whole scope of the laws]
* i will not show how composition works, because it is trivial or easy to figure out for all categories; but you should do figure them out for each category
* subtyping
	* i will talk about subtype relationships between optic categories; these are to be interpreted not technically, but conceptually, mathematically, as ((X is Y) = any X can be converted to an Y)
	* creating an optic for a multi-layer container is best done by creating an optic for each layer individually and compose them; however often the optics corresponding to different layers are from different optic categories and optics from different categories do not compose generally; one solution is to convert all the optics to be composed to a common supertype; hence subtype relationships between optic categories is important
* some common categories :
	* fold
		* fold is a very simple optic category, it makes us able to query the elements of the container
		* let Fold e c = c -> List e
	* get
		* get is probably the simplest optic category of all; it is like fold, but the content must contain exactly 1 element
		* let Get e c = c -> e
		* yepp, it is just a function
		* it supposes that the content is a single value
		* a common scenario of get is that the container is a product type and the content is the type of a certain data member of it; but the concept is more general; for example (is_negative : Integer -> Bool), (length : List x -> Integer) are also gets; any function can be regarded as a get
	* build
		* build is an optic category, same as get but in the opposite direction; instead of querying the element from the container : it produces a container from an element
		* let Build e c = e -> c
		* a common scenario is injecting a value in a sum type; for example (Right : r -> Either l r) is a build
		* a more common name of build is "review"
	* pairing the directions
		* we get certain other very useful optic categories by extending get or build with their opposite direction :
		* lens
			* for product types :
			* let Lens e c = { get : c -> e; set : e -> c -> c }
			* set is similar in purpose to build, but for product types; it can not build the container from an element alone, because the context is not necessarily empty; as a solution it has +1 input : an other value of the container, from which the context to be taken
			* the laws
				* intuitively
					* getting the content after setting it results in the same value that was set
						* set e >>> get = const e
					* setting the got content value results in the original container
						* set (get c) c = c
					* setting twice is equivalent with setting the last time 
						* set something >>> set at_last = set at_last
				* it is possible to derive the laws from the comonad concept
					* Lenses Are Exactly the Coalgebras for the Store Comonad 
						# links-to external https://r6research.livejournal.com/23705.html
			* lens is a very widely used category of optic; so much that the first optic libraries for example in haskell had "lens" in their names and many people still use "lens" as a synonym of "optic" [ambiguously]; 
			* the most straightforward scenario of lens is that it focuses from a product type to a member of that type
				* examples
					* second : Lens y (x y)
					* let KeyValuePair k v = { key : k, value : v } 
					* key_in_kv_pair : Lens k (KeyValuePair k v)
				* such lenses are so frequent that we will often have a macro to help their creation
		* prism
			* for sum types :
			* let Prism e c = { match : c -> Maybe e; build : e -> c }
			* match is the same as get, but the return value is in Maybe, because it does not necessarily exist
			* the laws
				* if i build a container from a content and then match on that container then i get back the content from which i built the container
					* build >>> match = Just
				* if i match on a container and manage to get an element from it and then build a container from the found element then that new container will be the same as the old container
					* fromMaybe c build (match c) = c
						* where fromMaybe :: q -> (p -> q) -> Maybe p -> q
			* a more commmon name of match is "preview"
	* affine traversal
		* often product and sum type constructions are mixed in a multilayer data structure; just think about algebraic datatypes and their ubiquity; hence the need to have an optic category which is a least general supertype of both lens and prism; with other words : we seek an optic category whose capability-set is the intersection of the capability-sets of lens and prism; from this specification : we can derive the representation of such an optic category by merging the representations of lens and prism so that we take the weaker one for each field
		* to recap : here are the data representations of lens and prism :
			* datatype Lens e c = { get : c -> e, set : e -> c -> c }
			* datatype Prism e c = { match : c -> Maybe e, build : e -> c }
		* the (container -> content) direction is weaker in prism [it does not necessary return an existing content]; the (content -> container) direction is weaker in lens [it requires an additional container]; hence
			* let NewOpticCategory e c = { match : c -> Maybe e, set : e -> c -> c }
		* the common name of this optic category is "affine traversal"
		* laws
			* i am too lazy to think about them [for now]
	* isomorphism
		* the technique for creating a new optic category learnt in the part about affine traversal can be used in the opposite order too : we may seek a new optic category whose capability-set is the union of the capability-sets of lens and prism
		* let NewOpticCategory e c = { get : c -> e, build : e -> c }
		* [supposing that these methods are inverses of each other :] this represents an isomorphism
		* an isomorphism represents the focus from some data to a possibly different representation of the same data; intuitively : we think about 2 types as isomorphic iff they represent the same information
		* laws
			* the 2 functions in an isomorphism must be inverses of each other to represent real isomorphism between the 2 types given as parameters
	* lift
		* the optic categories discussed till now treat the content as at most one element [with the exception of fold]; this is evidenced by their set and build functions, as they can reconstruct a container from just one element; if we want to treat the content as multiple element then what other functionality may we hope from the optic than just listing the elements? to transform the elements by a given function :
		* type NewOpticCategory e c = (e -> e) -> (c -> c)
		* name
			* the most common name is "semantic editor combinator"
				* it is coined by Conal Elliot
					# links-to external http://conal.net/blog/posts/semantic-editor-combinators
				* i think that the name "semantic editor combinator" is wierd and does not make sense to me
			* an other name is "setter"; i do not like this either because it collides with the set function of lens and they are not equivalent
			* other possible name is "map" or "mapping" or "mapper" or "change" or ... or "lift" or ...
	* traversal
		* the simple lift ["semantic editor combinator"] can be upgraded to be able to lift effecty functions :
		* type NewOpticCategory e c = forall a . Applicative a => (e -> a e) -> (c -> a c)
		* this is equivalent to the well known Traversable interface
		* if you do not know what interface Applicative is
			* here is my introduction
				# links-to internal kaxxmpbkqesnqecyn
		* laws
			* same as of the Traversable interface
				* traversal pure = pure
				* traversal f >>> map (traversal g) = getCompose (traversal (g >>> map f >>> Compose))
					* where : newtype Compose f g x = Compose { getCompose : g (f x) }
* more about Lens
	# links-to internal zpvtqfvuyntejjdtn
