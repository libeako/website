* 2018-04-20
* graal is a new foundation for the java platform
* created by oracle
* licence : GPL2 with classpath exception
* my understanding is not sure about it, hence this plog post may contain factual mistakes
* many new freatures
	* "substrate" can make a standalone executable from a program represented in java bytecode
		* it bakes the java runtime into the executable
		* this technology contains some limitations
			* example
				* dynamic class loading does not work
			* more info
				# links-to external https://github.com/oracle/graal/blob/master/substratevm/LIMITATIONS.md
	* "truffle" is an intermediate representation of programs, below source and above java byte code
		* common for all programming languages
			* this gives good interoperability between the programming languages
			* the communication across language boundary is via "messaging", no need for serialization
		* both dynamically and statically typed languages can be translated to truffle without runtime efficiency loss
	* "graal" compiler
		* similar to the old compiler inside the virtual machine implementation "hotspot"
		* now rewritten in java language
		* very good in compiling dynamically typed languages
			* a very nice theoretical idea exists since 10s of years ago : compilers can be automatically derived from interpreters by partially evaluating them at the concrete input program; this idea struggled to make a significant impact in practice so far; the developers of graal claim that they managed to overcome the practical difficulties
				* more info
					# links-to external https://www.google.com/search?client=firefox-b&q=partial+evaluation+interpreter+compiler+futurama&spell=1&sa=X&ved=2ahUKEwjMrbCa1cnaAhXQKlAKHfgUCbEQBSgAegQIABAm&biw=1555&bih=838
			* the performance of (the programs running on jvm generated by (a compiler automatically generated from an interpreter)) is close to google's java script engine "v8", which is an extremely efficient engine in the dynamically typed world; this result is huge in my opinion; it will give a big boost to implementations of dynamically type-checked languages
		* very good in compiling statically typed languages
			* this was surprising for me to learn and i consider it very remarkable
			* they allege that the performance is very close to llvm and they may even reach llvm level in the future
			* while keeping fast interoperability with other languages
* more info
	* Dynamically Composing Languages in a Modular Way: Supporting C Extensions for Dynamic Languages
		# links-to external http://chrisseaton.com/truffleruby/modularity15/rubyextensions.pdf
* my personal impression
	* graal seems a very remarkable software in multiple ways
	* i am disappointed that they put big emphasis on dynamically type-checked languages, because i think that they do not deserve to exist
