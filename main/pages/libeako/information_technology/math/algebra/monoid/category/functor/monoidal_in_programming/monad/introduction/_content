* monad is an interface of type functions; special version of monoidal
	* link to 'monoidal'
		# links-to internal kaxxmpbkqesnqecy
* intuition
	* you could have invented monads in programming; here is how :
	* kliesli composition
		* in functional programming effects may not happen to the side, but has to be encompassed in the output value of the function
			* if we want to load a function of type (x -> y) with some additional effect then we need to change the type of the function to (x -> c y), where c is a type function, creating a type whose values represent both the y as content and the additional effect as context
			* example
				* Maybe is a type function that implements interface Monad; returning Maybe makes the function able to fail, which can be considered an effect; the (possible failure) effect is like (exceptions as known in imperative programming languages)
		* if a type function m implements interface Monad then the functions with type (x -> m y) form a category
		* hence monads make it possible to compose programs from effectful functions in the same way as we do with normal functions
			* the composition of (x -> c y) functions is named "kliesli" composition and often denoted by ">=>"
	* functor
		* effects are contexts of a functor, hence Monad must be a subtype of Functor
	* join
		* monad makes this possible, but this is not exactly how monad is defined 
		* i will introduce the exact definition by first trying to implement the kliesli composition
		* a monadic type contains some arbitrary data with a context that represents effect; thus a monadic type is a container; hence it is reasonable to assume that functor is a superclass of monad
		* using the functor property we can easily implement something close to the kliesli composition :
			* kliesli_try_1 : (x -> m y) -> (y -> m z) -> (x -> m (m z)) kliesli_try_1 f g = f >>> map g 
		* but this is not exactly klieli composition, because the result is in a 2 layer container
		* if we could collapse the 2 layers into 1 then we would be able to implement the kliesli composition exactly; and that is what the exact definition of monad requires, such a collapsing method; it is traditionally named "join" :
			* join : m (m x) -> m x 
		* then the definition of the kliesli composition is :
			* kliesli : (x -> m y) -> (y -> m z) -> (x -> m z) kliesli f g = f >>> map g >>> join 
		* associativity
			* to make the previous argument simple for first time learners : i omitted something important : the kliesli composition must be associative; is our definition for it associative? not necessarily; but it is if we require that the join function is associative in the sense that it does not matter in which order we collapse adjacent layers of the container, formally :
				* join >>> join = (map join) >>> join
			* and this is what the definition of monad requires, that the join method has this associativity property
		* pure
			* associativity is not the only requirement for arrows in a category to have; an other one is the "identity" : there must be an arrow for each object from it to it, behaving neutrally with the arrow composition
			* the arrows in the category i am discussing here are the (x -> m y) functions, hence the requirement is that there is a (x -> m x) function; the traditional name of this method is "pure"
				* pure : x -> m x
			* hence the definition of monad requires this method
			* neutrality
				* the neutral behavior of 'pure' with composition is expressed by laws :
					* kliesli f pure = f kliesli pure f = f
				* the neutrality [and the parametricity of the kliesli composition] imply that the effect in the result of 'pure' is empty, that is 'pure' returns a "pure" value - from this is the name "pure"
		* as you hopefully see: monad is a monoid in the layers of contexts, 'join' being the composition method and 'pure' being the empty method
* the signature
	* putting together all the conclusions gathered in the "intuition" part : the definition of monad is :
	* interface Functor m => Monad m where
		* pure : x -> m x 	
		* join : m (m x) -> x
	* with the before mentioned laws [associativity of 'join' and neutrality of 'pure']
* in practice often a different definition is used, in which is a "monad bind" method instead of 'join'; these 2 definitions are mathematically equivalent; the advantage of the definition with bind is assumed run-time efficiency [i assume], the advantage of the definition with join is elegance
* other sources
	* philip wadler wrote an introductory article about using monads in functional programming; the article contains many examples
		* Monads for functional programming
			# links-to external http://homepages.inf.ed.ac.uk/wadler/papers/marktoberdorf/baastad.pdf
	* a haskell intro article to monad laws
		# links-to external https://wiki.haskell.org/Monad_laws
	* at typeclassopedia
		# links-to external https://wiki.haskell.org/Typeclassopedia
* the signatures
	* you probably should read the external sources about monad i referred to in this section; but if you did not then here are the signatures of the 2 alternative, equivalent monad definitions [without the laws] :
	* interface Monad m where
		* pure : x -> m x
		* (>>=) : m x -> (x -> m y) -> m y
	* interface Monad m <= Functor c where
		* pure : x -> m x
		* join : m (m x) -> m x
* monad-generic programs
	# links-to internal kqwejllsptnclmqz
* no general method to extract content from a monad
	* certain concrete monad type functions provide a method to extract content stored in them; a good example is the identity monad, which is just a simple wrapper around the pure content; but such feature is given by monads only individually; no general method exists to extract content from a monad [to see this : look at the methods of interface Monad; each return a monad]; thus if the concrete monad does not provide access to its data then nothing does; in such case one can perform computation on the data inside a monad [with the monadic bind function (>>=)] but will get the output in the same monad type; we can say : "one can not escape from monad"; this is an essential property; certain concrete monads represent a property of computation; a property of computation may be for example : possibility of performing input|output operation, possibility-to-fail; such computations must output their result in an appropriate monad, that marks the possible effect to be performed; but such properties are usually inherited, i mean : all the functions invoking these functions have these properties too; hence their output must also be in the same monad; with other words : once a produced value is in a monad representing an inherited property of computation : any value derived from it must also remain in that monad; non-escapabability from monads and static type checking guarantees this; with other words : this is a method to track computational properties by the static type system
	* in the section about functional programming i tought that among of the all 3 "function-bugs" side effects are the most interesting and i neglected the other 2; but now you may see that the other 2 [non-determinism, partiality] can be easily handled with monads
		* even if we do not get rid of them completely : at least they can be tracked by the type system, which is good enough usually
		* we may for each of these 2 computational properties implement dedicated non-escapable container types with monad interface implementation
		* non-determinism may also be considered to be input; hence for example haskell uses the IO monad to wrap it
		* totality is currently not checked by current popular compilers; not even by the haskell compiler; this may change in the future and in this case a PossiblyDivergent monad may be used to mark results of partial computations
		* as a theoretical note : this method does not hurt the purity of our use of functional paradigm
			* remember : a procedure is a real mathematical function if it always produces output and produces the same output for the same input in all circumstances
			* we can always achieve this by giving a fake equality function for these monads, that return true constantly; these equality tests are not be actually invoked anyway; then it theoretically holds that such values are always equal, hence the procedures producing them are functional
