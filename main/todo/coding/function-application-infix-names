Haskell is a wonderful, high level, modern language. One wonderful thing in it is that is teaches us to love and use [monoidal] compositionality. We should be thinking in composable things and in their compositions. That is: in functions. We should be leaning toward point-free coding. We should not be thinking in points and how they flow through a chain of functions. In the situations when we do need function application: we should do it in one single canonical way, which is juxtaposition.  In short: instead of writing `p |> x |> y |> z ` we should write `let f = x >>> y >>> z in f p`.  Composition oriented code is more probable to work well with future needs for changes in the code.  Hence we should not have any infix name for normal function application. Names like `apply_function` and `apply_argument` would have been sufficient and better.  > But what about using the low precedence of the infix name for grouping?  That is a only a popular hack to reduce the number of round brackets. Infix function naming was not invented for this purpose. This is not normal usage of them.  There is nothing wrong with the good old round brackets. Everyone knows and understands them, even without Haskell knowledge. They are much more readable than infix name precedences. They not only eliminate the need to do precedence memorization and calculation in our brain unconsciously but also provide a nice, immediately obvious visual boxing.  > But too many round brackets are difficult to read.  If an expression contains too many brackets then it is ripe for a restructuring with introducing let-expressions or whatever. Introduce some names.  If you do introduce `|>` then please choose something different. `|` to me feels like separation and function application feels to me rather like connection than separation. I would rather like something instead of `|` that visualizes a point, as it is intuitive for me to think about an argument as a point in the domain of the function.
